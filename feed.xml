<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David Trejo | Developer &amp;amp; Consultant</title>
  <subtitle>subtitle-here</subtitle>
  <id>http://dtrejo.com/</id>
  <link href="http://dtrejo.com/"/>
  <link href="http://dtrejo.com/feed.xml" rel="self"/>
  <updated>2014-03-14T06:06:00Z</updated>
  <author>
    <name>DTrejo</name>
  </author>
  <entry>
    <title>My Javascript Tooling Wishlist</title>
    <link rel="alternate" href="http://dtrejo.com/my-javascript-tooling-wishlist.html"/>
    <id>http://dtrejo.com//my-javascript-tooling-wishlist.html</id>
    <published>2014-03-14T06:06:00Z</published>
    <updated>2014-03-14T06:06:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;What follows is a wishlist of features I'd want in my perfect javascript
dev environment (I don't care whether each of these things is a separate command
line tool, I just want them :)&lt;/p&gt;



&lt;p&gt;I came up with this list at 2am instead of getting a good night's sleep in
preparation for a productive day at work. Some of these are easy to write, some
are HARD.&lt;/p&gt;

&lt;h2 id="i-dream-of-a-javascript-with-these-tools"&gt;I dream of a javascript with these tools…&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;flow-typing e.g. &lt;a href="https://github.com/brownplt/strobe"&gt;strobe&lt;/a&gt;, &lt;a href="http://cs.brown.edu/~sk/Publications/Papers/Published/gsk-flow-typing-theory/paper.pdf"&gt;strobe paper&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;a flow typer is a program that reads your javascript, notices the
operators you use on certain variables (e.g. &lt;code&gt;a + 1&lt;/code&gt;), and then guesses
the type of those variables.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;types via the flow-typer would make the following possible…
    &lt;ul&gt;
      &lt;li&gt;editor shows types for every variable, and you didn't have to specify them
:)&lt;/li&gt;
      &lt;li&gt;auto-generated API documentation, with types&lt;/li&gt;
      &lt;li&gt;a "lock-API" tool; when you run it, your the type signatures of your
functions are remembered. If the signatures every change, it warns you.
This "lock-API" tool will prevent you from forgetting to increment the
version of your package.json when you break the API.&lt;/li&gt;
      &lt;li&gt;test fuzzer based on the inferred types, to easily up your code coverage&lt;/li&gt;
      &lt;li&gt;some kind of fuzzer pattern language that would allow you to automatically
generate assertions to be used at the start of every function. assertions
would be removed before running in productions. this would help people
using your code to find mistakes more quickly. (This one is going off into
la la land. Not sure if I believe this would be useful enough).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;visualization of your project's require dependency graph e.g. &lt;a href="https://trace.gl/"&gt;tracegl&lt;/a&gt;?, &lt;a href="http://www.yasiv.com/npm#view/browserify"&gt;yasiv npm visualization&lt;/a&gt; via &lt;a href="https://www.youtube.com/watch?v=DCQNm6yiZh0"&gt;substack's lxjs '13 talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;visualization of which functions call other functions, along with a bird's eye
view of your whole program&lt;/li&gt;
  &lt;li&gt;static analysis tool to find uncalled callbacks (&lt;code&gt;callback&lt;/code&gt; &lt;code&gt;cb&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;done&lt;/code&gt;, etc)&lt;/li&gt;
  &lt;li&gt;static analysis tool to find dead code after &lt;code&gt;return&lt;/code&gt;. e.g. &lt;a href="http://npm.im/jshint"&gt;jshint?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;static analysis tool that reminds you to do &lt;code&gt;return cb()&lt;/code&gt;, so you never call
callbacks twice.&lt;/li&gt;
  &lt;li&gt;auto npm install
    &lt;ul&gt;
      &lt;li&gt;when you add a call to &lt;code&gt;require('example')&lt;/code&gt;, &lt;code&gt;example&lt;/code&gt; is detected as not
installed, and the tool runs &lt;code&gt;npm install --save example&lt;/code&gt; so you don't
have to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;style guide enforcement &lt;strong&gt;and correction&lt;/strong&gt; tool that bases itself on certain
"blessed" files. Based on the formatting and style of the blessed files, it
corrects newly written files to match the same whitespace, line-length, etc.
No blasphemers allowed!&lt;/li&gt;
  &lt;li&gt;v8 hidden class detector - if a hidden class is "broken" or deoptimized, it
warns you. e.g. if you use &lt;code&gt;delete&lt;/code&gt; on a property of your &lt;code&gt;new Point()&lt;/code&gt;
object.&lt;/li&gt;
  &lt;li&gt;lodash style native vs custom speed improvement detector
    &lt;ul&gt;
      &lt;li&gt;many functions are slower when implemented using native calls e.g. &lt;code&gt;[].slice&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides"&gt;John David Dalton's jsconf '12 presentation on which custom implementations are faster&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;this tool would tell you when to use custom, and when to use native.&lt;/li&gt;
      &lt;li&gt;it would also tell you when to switch from custom back to native (v8 gets
faster, etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;memory usage map overlaid on your code as a heat map
    &lt;ul&gt;
      &lt;li&gt;visually see where memory is being used in your code.&lt;/li&gt;
      &lt;li&gt;see which lines are responsible for how much memory usage&lt;/li&gt;
      &lt;li&gt;a snapshot after a day's run should theoretically show you where your
leaks are, because those lines are the hottest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(new Error).stack&lt;/code&gt; printer that highlights lines based on your app's code,
&lt;code&gt;node_modules&lt;/code&gt; code, and node core code.&lt;/li&gt;
  &lt;li&gt;performance test runner that takes a list of git commits, checks out each one,
runs benchmarks and records results, then continues on. spits out a report at
the end. maybe with a pretty graph showing which commits did best on which
parts of the benchmark.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="general-node-style-project-tools"&gt;general node-style project tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;bulk git repo updating (if your project is modular, and each part is in a
different repo)&lt;/li&gt;
  &lt;li&gt;bulk npm version updating (if you are substack, and want to manage the many
npm modules you've written)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="already-implemented-and-thus-less-interesting"&gt;already-implemented and thus less interesting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;jump to declaration e.g. &lt;a href="https://www.jetbrains.com/webstorm/"&gt;webstorm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jump to all usages of a function&lt;/li&gt;
  &lt;li&gt;auto test or auto rerun server on change e.g. &lt;a href="http://npm.im/run"&gt;run&lt;/a&gt;, &lt;a href="http://npm.im/nodemon"&gt;nodemon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;shell enhancement: click on a filename to open in your editor&lt;/li&gt;
  &lt;li&gt;code coverage e.g. &lt;a href="https://github.com/substack/coverify"&gt;coverify for client side js&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;highlight untested code in a really ugly color in your editor
e.g. &lt;a href="http://racket-lang.org/"&gt;DrScheme&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;review and edit diffs side-by-side before pushing to master (or while fixing
conflicts)
    &lt;ul&gt;
      &lt;li&gt;use &lt;a href="https://github.com/philz/git-vimdiff"&gt;Philip Zeyliger's git-vimdiff&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="ideas--suggestions--i-built-that"&gt;Ideas / suggestions / "I built that!"&lt;/h4&gt;
&lt;p&gt;Please if you know of any things that I should add to the lists above, tweet
at me: &lt;a href="http://twitter.com/ddtrejo"&gt;@ddtrejo&lt;/a&gt;, alternatively, &lt;a href="https://github.com/dtrejo"&gt;my email is on my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;David Trejo&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/brownplt/strobe"&gt;https://github.com/brownplt/strobe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.jetbrains.com/webstorm/"&gt;https://www.jetbrains.com/webstorm/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://npm.im/run"&gt;http://npm.im/run&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://npm.im/nodemon"&gt;http://npm.im/nodemon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://trace.gl/"&gt;https://trace.gl/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.yasiv.com/npm#view/browserify"&gt;http://www.yasiv.com/npm#view/browserify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://npm.im/jshint"&gt;http://npm.im/jshint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides"&gt;http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://racket-lang.org/"&gt;http://racket-lang.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DCQNm6yiZh0"&gt;https://www.youtube.com/watch?v=DCQNm6yiZh0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/philz/git-vimdiff"&gt;https://github.com/philz/git-vimdiff&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/substack/coverify"&gt;https://github.com/substack/coverify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Faster git workflow?</title>
    <link rel="alternate" href="http://dtrejo.com/faster-git-workflow.html"/>
    <id>http://dtrejo.com//faster-git-workflow.html</id>
    <published>2013-10-11T23:00:00Z</published>
    <updated>2013-10-11T23:00:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img height="100" src="http://dtrejo.com/images/00000000-Git-Logo-2Color.png?1395261751" /&gt;&lt;/p&gt;

&lt;p&gt;I find myself copy-pasting long filenames way too often when I work with
git. Tab completing deep paths is just as annoying. What might be a better way?&lt;/p&gt;



&lt;p&gt;What if &lt;code&gt;git status -s&lt;/code&gt; showed me this?&lt;/p&gt;

&lt;pre class="highlight text"&gt;$ git status -s
g1  M lib/child_process.js
g2 M  lib/sys.js
g3 ?? newfile.md
&lt;/pre&gt;
&lt;p&gt;And then I could do this:&lt;/p&gt;

&lt;pre class="highlight text"&gt;$ vim g1
$ git add g3
...
&lt;/pre&gt;
&lt;p&gt;Does anyone know of a tool that allows this?&lt;/p&gt;

&lt;p&gt;If it doesn't exist, let's see if I can make it :)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;D&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Metrics and Operational Awareness at Voxer</title>
    <link rel="alternate" href="http://dtrejo.com/metrics-and-operational-awareness-at-voxer.html"/>
    <id>http://dtrejo.com//metrics-and-operational-awareness-at-voxer.html</id>
    <published>2013-01-17T23:00:00Z</published>
    <updated>2013-01-17T23:00:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="" width="252" height="58" src="http://dtrejo.com/images/46879900-Voxer_Logo.png?1395437651" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: written in august 2012 during my Voxer internship.&lt;/em&gt;
&lt;em&gt;some links are broken as the &lt;code&gt;sky&lt;/code&gt; project has yet to be released.&lt;/em&gt;
&lt;em&gt;&lt;code&gt;sky&lt;/code&gt; has been released as &lt;a href="http://voxer.github.io/zag/"&gt;zag&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please read the article on Voxer's &lt;a href="/node-single-point-of-failure"&gt;no single point of failure architecture&lt;/a&gt;,
as it explains how process rings work, and how Voxer's load balancing works.&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="503" height="497" src="http://dtrejo.com/images/46879901-sky.png?1395437651" /&gt;&lt;/p&gt;

&lt;h2 id="what-are-the-salient-implementation-features-of-our-metrics-solution"&gt;What are the salient implementation features of our metrics solution?&lt;/h2&gt;

&lt;p&gt;Client side (on your app servers, which emit data)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;metrics are coalesced into 1440 byte udp packets to optimize network
efficiency&lt;/li&gt;
  &lt;li&gt;&lt;a href="/node-single-point-of-failure"&gt;handy node.js bindings&lt;/a&gt; which allow you simply call
&lt;code&gt;sky.counter("http_status|200")&lt;/code&gt; whenever a certain call suceeds or fails&lt;/li&gt;
  &lt;li&gt;keys emitted with the form &lt;code&gt;http_status|200&lt;/code&gt; are rolled together with keys
of the form &lt;code&gt;http_status|404&lt;/code&gt;, giving you both information on, say, 404s,
200 OKs, AND the high-level view of how many http requests you are doing per
minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Server side (on the skyservers which aggregate metrics data)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;skyservers form a ring, and clients load balance themselves so as not to
overwhelm a single server&lt;/li&gt;
  &lt;li&gt;intra-ring skyserver communication is also coalesced for efficiency.&lt;/li&gt;
  &lt;li&gt;load balancing allows you to add more skyservers as the number of your
appservers grows&lt;/li&gt;
  &lt;li&gt;every minute, skyservers talk to a single redis server to roll-up their data&lt;/li&gt;
  &lt;li&gt;the redis intermediary in front of riak allows for accurate counters,
because redis performs atomic &lt;a href="http://redis.io/commands/incr"&gt;&lt;code&gt;INCR&lt;/code&gt;&lt;/a&gt; operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Persisting data&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a rollup process continuously pulls keys out of redis and puts the latest
time period of data into redis, simultaneously performing 5-minute rollups of
the 1 minute data, if applicable.&lt;/li&gt;
  &lt;li&gt;riak as our persistence medium allows us to keep historical data forever, as
we can increase the size of our riak cluster by adding a machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Viewing metrics and adding new ones&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the redis server keeps a list of keys that have recently been emitted, and exposes
this list to our graphing UI, meaning that to begin recording a new metric,
you need not do any configuration, simply start recording it on your app servers.
The skygraphs UI will simply pick it up and start showing it to you.&lt;/li&gt;
  &lt;li&gt;the skygraphs UI will also hit redis for the latest minute's data, giving
you real-time access to what is going on right now in your infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="why-didnt-we-just-use-etsys-statsd-and-whisper-and-carbon"&gt;Why didn't we just use etsy's statsd and whisper and carbon?&lt;/h2&gt;
&lt;p&gt;Etsy wrote a library called &lt;a href="https://github.com/etsy/statsd"&gt;statsd&lt;/a&gt;, which works with &lt;a href="https://github.com/etsy/statsd"&gt;whisper&lt;/a&gt; (the
backend) to record metrics data. There are a couple reasons we chose not to use
these technologies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rings of servers recieving metrics is the only way we can handle the
volume of data being recorded by our app servers&lt;/li&gt;
  &lt;li&gt;riak allows us to store historical data forever (just add another machine)&lt;/li&gt;
  &lt;li&gt;we think our &lt;a href="skygraphs"&gt;graphing UI&lt;/a&gt; is pretty snazzy, especially since it has
&lt;a href="https://github.com/sentientwaffle/llquantize"&gt;heat maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Forthcoming: If you'd like to read about &lt;a href="skygraphs"&gt;skygraphs&lt;/a&gt;, our awesome graphing
UI, please check out &lt;a href="skygraphs"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;br /&gt;
&lt;a href="http://dtrejo.com"&gt;David Trejo&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://twitter.com/ddtrejo"&gt;@ddtrejo&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/DTrejo"&gt;DTrejo on github&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Node Single Point of Failure</title>
    <link rel="alternate" href="http://dtrejo.com/node-single-point-of-failure.html"/>
    <id>http://dtrejo.com//node-single-point-of-failure.html</id>
    <published>2013-01-17T23:00:00Z</published>
    <updated>2013-01-17T23:00:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;note: written in august 2012 during my Voxer internship.&lt;/em&gt;
&lt;em&gt;some links are broken as the &lt;code&gt;sky&lt;/code&gt; project has yet to be released.&lt;/em&gt;
&lt;em&gt;&lt;code&gt;sky&lt;/code&gt; has been released as &lt;a href="http://voxer.github.io/zag/"&gt;zag&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="252" height="58" src="http://dtrejo.com/images/46879900-Voxer_Logo.png?1395437651" /&gt;&lt;/p&gt;

&lt;p&gt;Voxer believes that any single point of failure is bad. Very bad (this is why we
use riak). To achieve this, we've written a couple libraries to allow node
processes to communicate across machines and in concert. The first is
&lt;a href="https://github.com/dannycoates/poolee"&gt;poolee&lt;/a&gt; by &lt;a href="https://github.com/dannycoates"&gt;Danny Coates&lt;/a&gt; which does http load balancing on the client,
and the second is &lt;a href="ring-was-unpublished"&gt;ring&lt;/a&gt;*, which organizes processes that compose a service
into a cooperating whole (each process owns part of the keyspace, and thus part
of the work).&lt;/p&gt;

&lt;p&gt;Here's how this looks:&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="499" height="388" src="http://dtrejo.com/images/46879717-nospof.png?1395437651" /&gt;&lt;/p&gt;

&lt;p&gt;Requests emanate from clients via &lt;a href="https://github.com/dannycoates/poolee"&gt;poolee&lt;/a&gt;, which has a list of all API
servers. Poolee chooses a random API server to speak with, and will stop talking
to the API server if it becomes unresponsive. Health checks on unresponsive
servers are performed with using exponential backoff (e.g. 1 second, 8 seconds,
16 seconds, etc), so as not to flood the network.&lt;/p&gt;

&lt;p&gt;The ring of API servers kicks in! Each client request has a distinguishing
characteristic (e.g. geographic region), which dictates a specific API server as
the "home" or "owner" of that data, and it is tasked with responding to that
request. You may have noticed that poolee chooses a &lt;em&gt;random&lt;/em&gt; node, but it turns
our that this random node knows it is not the owner of the request, and can
forward it to the true "home" node of that request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ring&lt;/code&gt; is consistent, which means that when an API server goes down, the other
servers will fill in for the downed server without changing the homes of data
stored on any nodes other than one neighboring node. The efficiency of home
re-shuffling is what makes the ring consistent. If this doesn't make sense, it is
because it's difficult to explain, wikipedia does a better job of explaining
&lt;a href="https://en.wikipedia.org/wiki/Consistent_hashing"&gt;consistent hash rings&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="failure"&gt;Failure&lt;/h2&gt;
&lt;p&gt;Poolee and ring work together and allow us to do rolling restarts without
service interruption, restart single machines when SSL has memory leaks,
and remove machines from our clusters.&lt;/p&gt;

&lt;p&gt;Thus, Voxer achieves a no single point of failure architecture using the
power of &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Forthcoming: docs and more information on &lt;a href="ring-was-unpublished"&gt;ring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;br /&gt;
&lt;a href="http://dtrejo.com"&gt;David Trejo&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://twitter.com/ddtrejo"&gt;@ddtrejo&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/DTrejo"&gt;DTrejo on github&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Salary Negotiation Resources (CS focused)</title>
    <link rel="alternate" href="http://dtrejo.com/salary-negotiation-resources-cs-focused.html"/>
    <id>http://dtrejo.com//salary-negotiation-resources-cs-focused.html</id>
    <published>2013-01-05T23:00:00Z</published>
    <updated>2013-01-05T23:00:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;This is a dump of my personal notes; expect nothing!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id="general"&gt;General&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.offer-letters.com/"&gt;http://www.offer-letters.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.jamesaltucher.com/2011/11/how-to-negotiate-in-three-easy-lessons/"&gt;http://www.jamesaltucher.com/2011/11/how-to-negotiate-in-three-easy-lessons/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.iwillteachyoutoberich.com/blog/negotiate-like-an-indian-i-taught-my-friend-how-to-negotiate-an-8000-salary-increase/"&gt;http://www.iwillteachyoutoberich.com/blog/negotiate-like-an-indian-i-taught-m…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://mindyourdecisions.com/blog/2009/08/04/how-to-negotiate-a-pay-raise-with-game-theory/"&gt;http://mindyourdecisions.com/blog/2009/08/04/how-to-negotiate-a-pay-raise-wit…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;why you should talk about salary with co-workers and friends: &lt;a href="http://news.ycombinator.com/item?id=4767273"&gt;http://news.ycombinator.com/item?id=4767273&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;summary/review of secrets of power negotiating book: &lt;a href="http://www.korokithakis.net/posts/secrets-power-negotiating/"&gt;http://www.korokithakis.net/posts/secrets-power-negotiating/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="startup-specific"&gt;Startup-specific&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://accountalent.com/?p=380"&gt;http://accountalent.com/?p=380&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How I negotiated my startup compensation
&lt;a href="http://blog.keen.io/post/29904565692/how-i-negotiated-my-startup-compensation"&gt;http://blog.keen.io/post/29904565692/how-i-negotiated-my-startup-compensation&lt;/a&gt; [article crit: &lt;a href="http://news.ycombinator.com/item?id=4413569"&gt;http://news.ycombinator.com/item?id=4413569&lt;/a&gt; ]&lt;/li&gt;
  &lt;li&gt;Should you join that start-up? Running the numbers.
 &lt;a href="http://auscillate.com/post/238"&gt;http://auscillate.com/post/238&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[great comments] &lt;a href="http://news.ycombinator.com/item?id=2928339"&gt;http://news.ycombinator.com/item?id=2928339&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="books"&gt;Books&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ask for it on amazon; be sure to do excercises with whichever friend of yours is best at negotiating&lt;/li&gt;
  &lt;li&gt;summary/review of secrets of power negotiating book: &lt;a href="http://www.korokithakis.net/posts/secrets-power-negotiating/"&gt;http://www.korokithakis.net/posts/secrets-power-negotiating/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="scientific"&gt;Scientific&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://link.springer.com/chapter/10.1007%2F978-3-642-00142-0_66"&gt;http://link.springer.com/chapter/10.1007%2F978-3-642-00142-0_66&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://link.springer.com/article/10.1007%2Fs11211-008-0084-x"&gt;http://link.springer.com/article/10.1007%2Fs11211-008-0084-x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://psycnet.apa.org/index.cfm?fa=search.displayRecord&amp;amp;UID=2001-17820-002"&gt;http://psycnet.apa.org/index.cfm?fa=search.displayRecord&amp;amp;UID=2001-17820-002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="unread"&gt;unread&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://news.ycombinator.com/item?id=2309317"&gt;http://news.ycombinator.com/item?id=2309317&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://news.ycombinator.com/item?id=2438980"&gt;http://news.ycombinator.com/item?id=2438980&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>My Github Pull Request Workflow</title>
    <link rel="alternate" href="http://dtrejo.com/my-github-pull-request-workflow.html"/>
    <id>http://dtrejo.com//my-github-pull-request-workflow.html</id>
    <published>2012-07-05T23:00:00Z</published>
    <updated>2012-07-05T23:00:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img height="100" src="http://dtrejo.com/images/00000000-Git-Logo-2Color.png?1395261751" /&gt;&lt;/p&gt;

&lt;p&gt;Let's say I'm taking pull requests for &lt;a href="https://github.com/mranney/node_redis"&gt;node_redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's how I go about it.&lt;/p&gt;

&lt;pre class="highlight text"&gt;export NUM=214 # for convenience
curl -s https://github.com/mranney/node_redis/pull/$NUM.patch &amp;gt; $NUM.patch

# see what changed, and make sure it applies cleanly
git apply --stat $NUM.patch
git apply --check $NUM.patch

# add the commits to master
git am --signoff &amp;lt; $NUM.patch

# if I need to make some changes, I do the following and put &amp;quot;e&amp;quot; next
# to the commits that need changes
git rebase -i origin/master

# If there&amp;#39;s only one commit in the PR, I use
git commit --amend
# (you should make an alias for this)
&lt;/pre&gt;
&lt;p&gt;Yes, rebase can be scary. I recommend reading about &lt;a href="http://gitfu.wordpress.com/2008/04/06/git-reflog-no-commits-left-behind"&gt;how to undo &lt;strong&gt;anything&lt;/strong&gt;
using git's reflog&lt;/a&gt;, even a botched rebase or merge.&lt;/p&gt;

&lt;h3 id="update-here-are-some-simpler-ways"&gt;Update: here are some simpler ways:&lt;/h3&gt;

&lt;pre class="highlight text"&gt;export NUM=8
curl -s https://github.com/dtrejo/readmetree/pull/$NUM.patch | git am --signoff
&lt;/pre&gt;
&lt;p&gt;Or even add this to your &lt;code&gt;~/.gitconfig&lt;/code&gt; (via &lt;a href="https://gist.github.com/piscisaureus/3342247"&gt;piscisaureus&lt;/a&gt;)&lt;/p&gt;

&lt;pre class="highlight text"&gt;[alias]
  # via https://gist.github.com/piscisaureus/3342247
  pullify = config --add remote.origin.fetch &amp;#39;+refs/pull/*/head:refs/remotes/origin/pr/*&amp;#39;
&lt;/pre&gt;
</content>
  </entry>
</feed>
