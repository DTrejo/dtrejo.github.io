<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David Trejo | Developer and Consultant</title>
  <subtitle>DTrejo's Developer Tips</subtitle>
  <id>https://dtrejo.com/</id>
  <link href="https://dtrejo.com/"/>
  <link href="https://dtrejo.com/feed.xml" rel="self"/>
  <updated>2018-01-11T05:26:00Z</updated>
  <author>
    <name>DTrejo</name>
  </author>
  <entry>
    <title>Everything You Should Do in the First 30 Days of a New Growth Engineering Job</title>
    <link rel="alternate" href="https://dtrejo.com/30-days-as-a-growth-engineer.html"/>
    <id>https://dtrejo.com//30-days-as-a-growth-engineer.html</id>
    <published>2018-01-11T05:26:00Z</published>
    <updated>2018-01-11T05:26:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;I’m going to lay out the things I did and wanted to do in the first 30 days of my growth engineering job at Credit Karma. I work on acquisition: getting us more traffic and more signups. My engineering work contributes to our efforts across SEO, conversation rate optimization, UX, and page speed optimization.&lt;/p&gt;

&lt;p&gt;The following areas are important to me:&lt;/p&gt;

&lt;p&gt;1) I wanted to gauge the amount of A/B testing and experimentation we've done across the key areas of the site. Neglected areas which are still in the conversion flow probably have easy conversion wins waiting for me.&lt;/p&gt;

&lt;p&gt;2) I wanted to measure our copywriting skill and amount of copy testing, because as patio11&lt;sup&gt;⁂&lt;/sup&gt; points out, a good homepage headline can create a 20% site-wide lift.&lt;/p&gt;

&lt;p&gt;3) I wanted to tap into the voice and exact words used by our members so that I can find good headlines and copy and understand their painful, expensive problems†. This gives me the background I need to read a page and know how well it connects, and what CTAs will resonate best.&lt;/p&gt;

&lt;p&gt;4) I wanted to understand WTF people are actually doing on our site. What pages do they visit most. Where do they bounce. What pages are dead ends without a CTA. What pages load like molasses. What pages suck on mobile. What pages look like when logged out vs logged in. What personalization can be shown when logged out, to continue to achieve the goal of the page. What other proven conversion tactics can we steal from other parts of the site and easily reuse. Where does the “scent,” aka intent, of a conversion flow get confusing for members. Where do they put their trust in us the most, and how can we reassure them at these key moments or ask for less (sensitive) information. And so on.&lt;/p&gt;

&lt;p&gt;And here’s how I’ve gone about figuring out the above.&lt;/p&gt;

&lt;h2 id="finding-less-optimized-areas-of-the-conversion-flow"&gt;#1 Finding Less Optimized Areas of the Conversion Flow&lt;/h2&gt;
&lt;p&gt;This is difficult because our particular team is on the newer side and we don’t have a well organized log of completed experiments, their results, and what parts of the site they were run on. Maybe if you use optimizely this would be easier to figure out.&lt;/p&gt;

&lt;h2 id="gauging-copywriting-skill"&gt;#2 Gauging Copywriting Skill&lt;/h2&gt;
&lt;p&gt;We have certain phrases that have certainly undergone testing in TV ads. I have noticed that we have very few tests for headlines or button copy. I sense we have a lot of wins waiting for us here :) I suspect that our paid revenue marketing teams have some great copy in their Facebook and Google ads, but I’ve yet to request access so I can read what they’re running.&lt;/p&gt;

&lt;h2 id="understanding-how-our-members-talk-and-their-expensive-problems"&gt;#3 Understanding How Our Members Talk and Their Expensive Problems&lt;/h2&gt;
&lt;p&gt;The best way to do this is with an Amy Hoy&lt;sup&gt;※&lt;/sup&gt; Sales Safari. Because I haven’t bought the course (yet) and I was feeling lazy, I just signed up for f5bot.com and set up keyword searches for Credit Karma and the names of our competitors to see what people are saying about us on Reddit/HN. You can also use littlebirdie for this. I also asked member support to give me access to any places where they post feedback from our members (for us that is the #all-the-feels channel and the #bad-iOS-reviews / #bad-android-reviews channels).&lt;/p&gt;

&lt;p&gt;Of course I want more than that, but I haven’t been super focused on conversion copywriting and sales writing lately, so it hasn’t been the highest priority. I wish I had more good words from our members because we have a lot of different services and I feel I don’t understand people well enough yet (and I suspect my coworkers are in a similar boat).&lt;/p&gt;

&lt;h1 id="figuring-out-wtf-people-are-doing-on-our-site"&gt;#4 Figuring out WTF People Are Doing on Our Site&lt;/h1&gt;
&lt;p&gt;To accomplish this I did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Used Google Analytics to identify the top 20 pages by total sessions&lt;/li&gt;
  &lt;li&gt;For each page, I printed that page's…
    &lt;ul&gt;
      &lt;li&gt;Desktop authenticated appearance (with one of those full page screenshotting tools)&lt;/li&gt;
      &lt;li&gt;Desktop unauthenticated appearance&lt;/li&gt;
      &lt;li&gt;Google analytics behavior flow (play around with the settings because yours might not display right by default: make sure you've set it to "automatically group pages").&lt;/li&gt;
      &lt;li&gt;Still TODO: mobile appearance&lt;/li&gt;
      &lt;li&gt;Still TODO: lighthouse page speed performance stats while 3G throttled&lt;/li&gt;
      &lt;li&gt;Labeled each printed screenshot with the traffic range (1-20)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I also printed out our registration flow and did the same&lt;/li&gt;
  &lt;li&gt;I also printed the emails we send to rescue incomplete signups. And I also pointed out how many people are in this state. After three emails we send them nothing at all, when we could be sending emails to increase trust. Lots of improvement here too).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is very helpful because behavior flows tell you what pages someone visits before and after a page, as well as the dropoff rate. So you can get a high level feel for what people are doing.&lt;/p&gt;

&lt;p&gt;I put all of these printouts on one of our large whiteboard walls. While giving people a tour of the wall and discussing it with coworkers, we found a lot of improvements to be made. We still have tests to run to see whether the improvements create lift. There are some that will create lifts with 100% certainty, such as adding a call to action at the end of a page that lacks one :)&lt;/p&gt;

&lt;p&gt;I have yet to make a more exhaustive list of tests to run, and prioritize them. But I'm sure we'll get to it eventually.&lt;/p&gt;

&lt;p&gt;I'd highly recommend this one for any growth team, because it gives you all shared context and lets you really SEE your site again. Looking at your site on a screen just shuts down your brain. Also, you likely don't frequently visit many of the top pages and flows that drive your business.&lt;/p&gt;

&lt;h2 id="bonus-make-yourself-a-model-to-translate-your-top-metrics-into-revenue-numbers"&gt;Bonus: Make Yourself a Model to Translate Your Top Metrics into Revenue Numbers!&lt;/h2&gt;

&lt;p&gt;Someone on our team made a spreadsheet where you can plug in an incremental lift to any of the following metrics and it will spit out a revenue lift. I'd highly recommend you make one of these for yourself because it makes
back-of-the-napkin impact sizing MUCH easier. &lt;/p&gt;

&lt;p&gt;Here's what we can easily convert to revenue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New signups&lt;/li&gt;
  &lt;li&gt;Returning member logins&lt;/li&gt;
  &lt;li&gt;Revenue (duh)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="here-are-the-tactical-things-ive-been-doing-that-have-contributed-to-my-productivity-and-overall-happiness"&gt;Here Are the Tactical Things I've Been Doing That Have Contributed to My Productivity and Overall Happiness:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Have an expensive problem-style "why" conversation with the person who wants the project to happen, before writing any code. This lays out the business motivations of the project and helps you explore the solution-space for something satisfactory, rather than the PERFECT solution which would take forever to build.&lt;/li&gt;
  &lt;li&gt;Size the expected impact of the project: +revenue, +signups, hours of saved, etc. This helps you prioritize and helps you guard your project and continue to invest in it. When you know it would be worth it to work on your project for a year, you’ll be able to defend continued investment even if factors outside your control delay or slow down your project.&lt;/li&gt;
  &lt;li&gt;Wherever possible, I try to ship as soon as possible and cut scope as much as necessary to make this happen. Code in production is worth infinitely more than code langouring in a branch, picked over by code reviews (as patio11 also says). &lt;/li&gt;
  &lt;li&gt;Is it 80% done / good enough? Ship it. This isn't my advice, this is advice from my friend who founded three profitable bootstrapped businesses and exited two of them :) It works.&lt;/li&gt;
  &lt;li&gt;I always, always, go talk to people in person if I have more than a few words to say over slack. You can't solve across the whole solution-space if you haven't given the other person complete knowledge of what you're trying to accomplish. Make sure to mention the words "experiment" and "prototype," so they give you the easy routes too. Also, ask if anyone else at the company is already using the API they suggest you use. You don't want to be on the bleeding edge of technology: boring technology&lt;sup&gt;‡&lt;/sup&gt; is the way to go.&lt;/li&gt;
  &lt;li&gt;Whenever I need a code review: immediately slack message everyone who I need approvals from. Or even stop by their desk if I know the review is a doozy (I do try to keep my PRs under 50 insertions though–Dan McKinley: I was listening!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck out there, may your tests win! &lt;br /&gt;
David Trejo&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;⁂&lt;/sup&gt; &lt;a href="http://www.kalzumeus.com/"&gt;http://www.kalzumeus.com/&lt;/a&gt; &lt;br /&gt;
† &lt;a href="https://ExpensiveProblem.com"&gt;https://ExpensiveProblem.com&lt;/a&gt; &lt;br /&gt;
&lt;sup&gt;※&lt;/sup&gt; &lt;a href="http://yearofhustle.com/"&gt;http://yearofhustle.com/&lt;/a&gt;&lt;br /&gt;
&lt;sup&gt;‡&lt;/sup&gt; &lt;a href="http://mcfunley.com/choose-boring-technology"&gt;http://mcfunley.com/choose-boring-technology&lt;/a&gt;  &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to Hustle on Your Referrals So They Actually Get Hired</title>
    <link rel="alternate" href="https://dtrejo.com/referrals.html"/>
    <id>https://dtrejo.com//referrals.html</id>
    <published>2018-01-11T04:55:00Z</published>
    <updated>2018-01-11T04:55:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;You want your friend to work with you. You want your referral bonus. You want your friend to make money. How do you do everything you possibly can to get your friend hired? Read on :)&lt;/p&gt;

&lt;p&gt;Here are all the ways that my friend hustled to get me hired as his referral, as well as the ways I hustle to get my referrals through the hiring process. Pick and choose which techniques you want to use. I’ve marked the most important ones with a star 💫.&lt;/p&gt;

&lt;h2 id="ways-to-help-your-referral-from-start-to-finish"&gt;Ways to Help Your Referral from Start to Finish&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ask them what they are looking for so you can route them towards work they actually want to do&lt;/li&gt;
  &lt;li&gt;Have a 15-60 minute conversation with them where you answer all their tough, deep questions and also share the answers to all the tough questions you want to know while evaluating a company. Give them all the insider information they need to decide they want to work at your company.&lt;/li&gt;
  &lt;li&gt;💫 Look for positions in your company which match what they want, and introduce your friend to the hiring managers for those positions&lt;/li&gt;
  &lt;li&gt;This is also a good time to put your referral into Lever or your official referral system so you can get credit&lt;/li&gt;
  &lt;li&gt;How to find the hiring managers? 1) ask people on the relevant teams about who the hiring managers are 2) face to face, ask a recruiter friend who the hiring managers are&lt;/li&gt;
  &lt;li&gt;What if you don’t see any open positions for what your friend wants to do? Don’t give up. Find and introduce your friend to the hiring managers anyway, because everyone is always hiring, or they may not have published the job descriptions yet, or the headcount might be opening up next week.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you introduce your friend to the hiring manager? Ask the hiring manager if they want an intro; if you can’t find them in person, send an email like this:&lt;/p&gt;

&lt;pre class="highlight text"&gt;Subject: Want intro? Growth Engineer Candidate
Hey $firstname, 
Want an intro to $friendname who wants to do growth engineering for us?
Just reply yes or no, and it’s okay to say no.
$optionalLinksToLinkedInOrGithubOrWhatever
$optionalResume
  
Thanks in advance,
$yourname
&lt;/pre&gt;  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the hiring manager says yes, introduce them:  &lt;/p&gt;

&lt;pre class="highlight text"&gt;Subject:  
$friendname &amp;lt;&amp;gt; $hiringmanagername re Growth Engineering @ Credit Karma
  
$friendname meet $hiringmanager name.
$hiringmanagername meet $friendname.

$friendname wants to do growth engineering with us. 
They are impressive in these ways. 
$optionalLinksToLinkedInOrGithubOrWhatever

$hiringmanager name is in charge of $listOfAreas. 
They are impressive in these ways. $linkToLinkedIn

You would both benefit from speaking.
$yourName
&lt;/pre&gt;  &lt;/li&gt;
  &lt;li&gt;Now follow up every two days and cc both of them and ask "How's this going?"&lt;/li&gt;
  &lt;li&gt;If the recruiter is involved, whenever you ping them, ask “hey $person, any updates?”, and send the email to everyone, with the main person you want movement from in the TO field, and use their name. Everyone else gets Cc’d.&lt;/li&gt;
  &lt;li&gt;You might be a thinking, “that’s fucking annoying! I don’t want to spam people like that!” You’re thinking about this all wrong. If your company makes the hire, that means your friend will make the company 3x to 10x to 20x to 100x what they are paid. You are doing the company a big favor by referring your friend, and this is why you get a referral bonus. You are also doing your friend a favor because hopefully your company actually pays people. If not, leave ASAP. The hiring manager should and WILL thank you for following up and keeping everyone updated and on task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that the process is thoroughly kicked off, keep pushing it along and updating your referral on what you learn. When they progress to each consecutive round, give them whatever tips you might have, or consider talking to someone on their future team and ask about what they are looking for in interviews so you can relay any tips without giving away key information.&lt;/p&gt;

&lt;p&gt;When your friend gets an offer, talk over their offer with them and any other offers they have and actually help them decide between them. Even if they have another better offer, San Francisco is small and you will probably run into them and you want to give them good advice.&lt;/p&gt;

&lt;h2 id="what-to-tell-your-referral"&gt;What to Tell Your Referral&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep them maximally updated on everything you are doing for them. If you’re still searching for hiring managers, let them know you haven’t forgotten about them.&lt;/li&gt;
  &lt;li&gt;💫 Ask your friend to ping you if 1) you haven’t updated them in 2 days, or, 2) the other people in the company haven’t gotten back to them in 2 days. If you really wanted to hustle and be quick, you could do 1 day. Make sure your referral has your number so they can text or call you, which is way easier and better than having them email you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="for-quicker-turnaround"&gt;For Quicker Turnaround…&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;💫 Always always always, even if you feel it may be a bit inconsiderate, visit the desk of the recruiter or hiring manager to talk with them. You will get better, faster, more thorough answers to your questions. And they will thank you for it, because this is how they operate (unlike us engineers, they don’t mind interruptions).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all I’ve got for you—go forth, get your referrals hired, and go for expensive dinners with your new referral cash!&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David Trejo&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Moneyball Book Review and Measuring Revenue per Engineer</title>
    <link rel="alternate" href="https://dtrejo.com/moneyball-book-review-and-measuring-revenue-per-engineer.html"/>
    <id>https://dtrejo.com//moneyball-book-review-and-measuring-revenue-per-engineer.html</id>
    <published>2017-05-18T02:40:00Z</published>
    <updated>2017-05-18T02:40:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;First, I've pulled out the highlights of Moneyball for you. The book is about
how the Oakland A's baseball team buys players who are undervalued by the rest
of the league. This allows them to build an amazing team despite their budget.&lt;/p&gt;

&lt;p&gt;Second, we'll look at ways to measure revenue per engineer, and related numbers we'd want to know. Are you an engineering leader with 20+ people in your organization? You'll like this section because you're always trying to give headcount to the teams who'll most favorably improve revenue. You're also trying to hire engineers who care about your business.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reading time: 11 minutes, 2 seconds–but don't let that scare you away.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="moneyball-book-review"&gt;1. Moneyball Book Review&lt;/h2&gt;
&lt;p&gt;My style of book review is to pull out the best sections, so here they are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] baseball, more than other sports, gave you meaningful things to count, and that by counting them you could determine the value of the people who played the game
&lt;br /&gt;– page 69&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the thirty-fifth pick approaches, Erik once again leans into the speaker phone. If he leaned in just a bit more closely he might hear phones around the league cliciking off, so that people could laugh without being heard. For they do laugh. They will make fun of what the A's are about to do, and there will be a lesson in that. The inability to envision a certain kind of person doing a certain kind of thing because you've never seen someone who looks like him do it before is not just a vice. It's a luxury. What begins as a failure of imagination ends as a market inefficiency: when you rule out an entire class of people from doing a job simply by their appearance, you are less likely to find the best person for the job.
&lt;br /&gt;– page 115&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A set of Platonic ideas is one of the gifts the Wall Street traders gave to Paul DePodesta. The precision of the AVM system, copied by Paul, enabled him to think about every event that ocurred on a basedball field in a new and more satisfying way. Any ball hit anyplace on a baseball field had been hit just that way thousands of times before: the average of all those hits was the Platonic idea. Call it a line drive hit at &lt;em&gt;x&lt;/em&gt; trajectory and &lt;em&gt;y&lt;/em&gt; sp speed to point #968. From the ten years worth of data you ca see that there have been 8,642 practically identical hits. You can see that 92 percent of the time the hit went for a double, 4 percent for a single, and 4 percent it was caught. Suppose the average value of that event is .50 of a run. &lt;em&gt;No matter what actually happened,&lt;/em&gt; the system credits the hitter with having generated .50 of a run, and the pitcher with having given up .50 of a run. If Johnny Damon happens to get one of his trademark jumps and makes a sprawling catch, he is credited with saving his team .50 of a run.&lt;/p&gt;

  &lt;p&gt;The beauty of the value of a hit (or catch) was that the game gave it to you, the game &lt;em&gt;told&lt;/em&gt; you how valuable every event was, by telling you how valuable it had been, on average, over the past ten years. By listening to what the game told him about the value of events, Paul could take every ball hit in the area broadly defined as center field and determine its "expected run value".
&lt;br /&gt;– page 135&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Author notices that the A's in the video room watch the game in a completely different manner. They reply:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"It's looking at process rather than outcomes," Paul says. "Too many people make decisions based on outcomes rather than process."&lt;/p&gt;

  &lt;p&gt;The route a pitch takes to the cather's mitt &lt;em&gt;is&lt;/em&gt; an outcome, I say. It's just a more subtle outcome.&lt;/p&gt;

  &lt;p&gt;"It's not what happened," says Paul, "it's how our guy approached it."
&lt;br /&gt;– page 146&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] meant little to the Oakland A's, who were forever looking for dirt-cheap opportunities to accept bad defense for an ability to get on base. One trick of theirs was to pound on a player just after he'd had what appeared to be a career-threatening injury. Billy Beane had a favorite saying, which he'd borrowed from the Wall Street investor Warren Buffet: the hardest thing to find is a good investment.
&lt;br /&gt;– page 161&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I can already think of a few life events that devalue engineers for most employers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The reason the Oakland A's, as run by Billy Beane, played as if they were a different team in the second half of a season is that they &lt;em&gt;were&lt;/em&gt; a different team. As spring turned to summer the market allowed Billy to do things that he could do at no other time of the year. The bad teams lost hope. With the loss of hope came a desire to cut costs. With the desire to cut costs came the dumping of players. As the supply of players rose, their prices fell. By midsummer, Billy Beane was able to acquire players he could never have afforded at the start of the season.
&lt;br /&gt;– page 193-194&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Makes me think that every engineering leader should have very friendly relationships with both their reports and their peers at other companies. When an engineer is ready to leave, and isn't interested in moving internally, why let them quit when you might be able to call a friend and trade them for someone else, leaving everyone happier?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;His reduced circumstances had forced Billy Beane to embrace a different mental model of the BIg League Pitcher. In Billy Beane's mind, pitchers were nothing like high-performance sports cars, or thoroughbred racehorses, or any other metaphor that implied a cool, inbuilt superiority. They were more like writers. LIke writers, pitchers pitchers initiated action, and set the tone for their games. THey had all sorts of ways of achieving their effects and they needed to be judged by those effects, rather than by their outward appearance, or their technique. To place a premium on velocity for its own sake was like placing a premium on big vocabulary for its own sake. […] Good pitchers were pithcers who got outs; how they did it was beside the point.&lt;/p&gt;

  &lt;p&gt;Good pitchers were like writers in another way too: their output was harder than it should have been to predict.
&lt;br /&gt;– page 222&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] Jackie Robinson was exactly the sort of player the A's and the Jays salivate over. He had stats they tended to stress–high on-base, plate discipline, great power for a second baseman, etc.–&lt;em&gt;plus he was undervalued.&lt;/em&gt; Indeed, one way of looking at the revolution in baseball management is a search for less dramatic version fo Jackie Robinsonºplayers who, for one unfair reason or another, often because of their appearance, had been maligned and undervalued by the market.
&lt;br /&gt;– page 297&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id="measuring-revenue-per-engineer-applying-moneyball-to-engineers"&gt;2. Measuring Revenue per Engineer: Applying Moneyball to Engineers&lt;/h2&gt;

&lt;p&gt;We want to track the engineering equivalent of expected runs, not fastball speed or whether they have a good body.&lt;/p&gt;

&lt;h2 id="what-are-the-engineer-equivalents-of-moneyballs-baseball-stats"&gt;What are the engineer equivalents of Moneyball's baseball stats?&lt;/h2&gt;

&lt;p&gt;Raw engineering skill does not necessarily correlate with revenue.&lt;/p&gt;

&lt;p&gt;Many still try (and fail) to gauge engineering skill using whiteboard interviews.&lt;/p&gt;

&lt;p&gt;Another set of companies test engineering skill with live coding, pair programming, homework projects, and coding challenges.&lt;/p&gt;

&lt;p&gt;I've yet to hear of someone who has explicitly said they hire based on the candidate's future value to their company.&lt;/p&gt;

&lt;p&gt;How do we measure engineering &lt;strong&gt;value&lt;/strong&gt; (not skill) for various roles?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Frontend&lt;/li&gt;
  &lt;li&gt;Backend&lt;/li&gt;
  &lt;li&gt;Systems&lt;/li&gt;
  &lt;li&gt;Growth&lt;/li&gt;
  &lt;li&gt;Native&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="what-do-we-wish-we-knew"&gt;What do we wish we knew?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cost per line of code (bugs + churn + initial-time-cost-to-write). NASA measured this, they paid $1,000 per LOC related to the &lt;em&gt;Challenger&lt;/em&gt; accident.*&lt;/li&gt;
  &lt;li&gt;Revenue generated per line of code&lt;/li&gt;
  &lt;li&gt;Revenue generated over time&lt;/li&gt;
  &lt;li&gt;Time to ship (from e.g. design phase until production)&lt;/li&gt;
  &lt;li&gt;Amount of time code spends in inventory before sale (code in branches awaiting deployment count as inventory; production counts as sale)&lt;/li&gt;
  &lt;li&gt;Server costs saved (number of servers + cost for servers + number of pager alerts + revenue per server-dollar)&lt;/li&gt;
  &lt;li&gt;Client-side device costs saved (latency + CPU + energy + data + value of customer's time)&lt;/li&gt;
  &lt;li&gt;Customer value created (usually we use revenue as a proxy for customer value)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="secondary-metrics-that-correlate-in-well-known-ways-with-the-above"&gt;Secondary metrics that correlate in well-known ways with the above:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Page speed increases&lt;/li&gt;
  &lt;li&gt;Test suite speed increases&lt;/li&gt;
  &lt;li&gt;Team efficiency increases&lt;/li&gt;
  &lt;li&gt;Lines of code deleted&lt;/li&gt;
  &lt;li&gt;Number of deploys per week&lt;/li&gt;
  &lt;li&gt;Amount of downtime&lt;/li&gt;
  &lt;li&gt;Improved new engineer onboarding speed&lt;/li&gt;
  &lt;li&gt;Bugs fixed (ideally in a way that isn't gameable)&lt;/li&gt;
  &lt;li&gt;Bugs fixed &lt;em&gt;before anyone else knew they existed.&lt;/em&gt; Communicating and getting credit for these is a very difficult problem for some of my friends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You and your company have certain things you value. If you're not sure what you
value, survey your current
team's resumes and past performance reviews for what stats got them noticed. You
can turn these into questions to ask before a phone screen or instead of a
resume. Personally I don't believe in resumes, because as engineers we usually aren't good at
reducing our value down to bullet points.&lt;/p&gt;

&lt;h2 id="measuring-the-value-of-your-teams"&gt;Measuring the Value of Your Teams&lt;/h2&gt;

&lt;p&gt;You can work numbers for the metrics above from the front or from the back.&lt;/p&gt;

&lt;p&gt;Working the numbers from the back means looking at…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Profit and loss for company → P &amp;amp; L for team → team size → single team-member → fraction of impact&lt;/li&gt;
  &lt;li&gt;Team shape, e.g. who worked on a particular feature: number engineers of each type, number of designers, number of PMs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you can't quantify the value of a single engineer, you can still
understand the value of a department or a team. Then you can use the amount you pay
each person to &lt;em&gt;estimate&lt;/em&gt; the fraction of value they bring. The amount you pay a
person doesn't always correlate with how much value they bring, but
it's a start.&lt;/p&gt;

&lt;p&gt;Working the numbers forward means you evaluate existing teammates based on any stat that the person had the presence of mind to track and share, then convert it to a dollar amount.&lt;/p&gt;

&lt;p&gt;As for discovering new and promising engineers, you might look at…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby gems stats&lt;/li&gt;
  &lt;li&gt;Github repo stats&lt;/li&gt;
  &lt;li&gt;npm module stats&lt;/li&gt;
  &lt;li&gt;Bullet points on their resume, adjusted to fit your company's situation and reduced to dollar figures. For example, a 20% reduction in server fleet size, applied to your 2000 servers which cost you $Y per year, means if you hire this devops person and they do the same optimization, you stand to save… $Y-(Y*.2) annually.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, we want a technique that works well on people without public
work. Thus a questionnaire would work well, assuming they can give us stats or at
least rough numbers. For people without past industry experience, the best we can do is measure engineering skill and potential in an unbiased way.&lt;/p&gt;

&lt;h3 id="onboarding-for-newly-hired-engineers"&gt;Onboarding for Newly Hired Engineers&lt;/h3&gt;

&lt;p&gt;Zach Millman, Senior Product Engineer at Lever, throws in:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Onboarding/retraining can be a large cost. Someone who isn't fully comfortable with browser and web stack might still have productivity similar to a junior engineer, even after half a year.&lt;/p&gt;

  &lt;p&gt;There's also a danger in measurement. Any time someone is incentivized to increase a number, they'll do it–even if it's not sustainable long term (e.g salespeople promising features that don't exist).&lt;/p&gt;

  &lt;p&gt;I think one of the things that makes engineering really different from baseball is how much the knowledge of the particular team and stack matter in actual productivity. A hitter will have roughly the same "productivity" on any team. A junior engineer who's been working at a company for two years is often much more productive than a senior engineer who's been there for half a year and hasn't seen all the codebase.&lt;/p&gt;

  &lt;p&gt;Switching costs are brutal :(&lt;/p&gt;

  &lt;p&gt;– Zach Millman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="what-increases-the-value-of-an-engineer"&gt;What increases the value of an engineer?&lt;/h3&gt;

&lt;p&gt;Someone who has the same stats, but is from a historically underpaid group in
tech, or who has work experience that no one else knows how to assess or value. This is why Matasano has such success with their CTFs.*&lt;/p&gt;

&lt;h3 id="what-are-other-people-measuring"&gt;What are other people measuring?&lt;/h3&gt;

&lt;p&gt;Some teams measure as part of how they lead/manage:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want everyone on my team to be able to go home confident they’ve done their job well, and not worry if I’ve just had a bad day. […]
Our team pays attention to:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Commit frequency: we encourage everyone to check in multiple times daily&lt;/li&gt;
    &lt;li&gt;Commit size: keeping work surface area small to lower risk&lt;/li&gt;
    &lt;li&gt;Code churn: in retrospectives and to notice when someone is stuck&lt;/li&gt;
    &lt;li&gt;Legacy refactoring: to notice when people are cleaning up the codebase&lt;/li&gt;
    &lt;li&gt;Helping others: to recognize team players&lt;/li&gt;
    &lt;li&gt;Review Speed: because it can be tied directly to business value delivered&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;– Andrew Templeton, Engineering Director (&lt;a href="https://twitter.com/ayetempleton"&gt;@ayetempleton&lt;/a&gt;)*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="choosing-what-to-measure"&gt;Choosing what to measure&lt;/h2&gt;

&lt;p&gt;You &lt;strong&gt;don't&lt;/strong&gt; want to measure business outcomes on a day-to-day basis, because
that is demotivating. You want to measure activities that you know lead to good
business outcomes. For example, you wouldn't only give people credit for
successful A/B tests, instead you'd know that 1 in 6 A/B tests were successful last year,
and encourage people to run more (within reason).&lt;/p&gt;

&lt;p&gt;What do you wish you could measure? How are your measurements coming along?&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David&lt;br /&gt;
david åt dtrejo.com&lt;/p&gt;

&lt;p&gt;P.S. Thank you &lt;a href="https://www.linkedin.com/in/chyheim-jackson-burgess-507b3930/"&gt;Chy&lt;/a&gt; and &lt;a href="https://twitter.com/zmillman"&gt;Zach&lt;/a&gt; for your critique!&lt;/p&gt;

&lt;h4 id="footnotes"&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;* &lt;a href="https://history.nasa.gov/sts1/pages/computer.html"&gt;NASA's cost per LOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;* &lt;a href="https://sockpuppet.org/blog/2015/07/13/starfighter/"&gt;Erin on Matasano's CTFs&lt;/a&gt;; &lt;a href="https://sockpuppet.org/blog/2015/03/06/the-hiring-post/"&gt;Thomas' article on hiring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;* &lt;a href="https://blog.gitprime.com/why-kpis-matter-for-software-engineering-andrew-templeton"&gt;Andrew Templeton on what KPIs he tracks in an interview with GitPrime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Related articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://danluu.com/programmer-moneyball/"&gt;Dan Luu on programmer moneyball&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://danluu.com/hiring-lemons/"&gt;Dan Luu on information asymmetry in hiring (who is great?)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Questions That Senior Systems Engineers Want Answered</title>
    <link rel="alternate" href="https://dtrejo.com/questions-that-senior-systems-engineers-want-answered.html"/>
    <id>https://dtrejo.com//questions-that-senior-systems-engineers-want-answered.html</id>
    <published>2017-05-16T21:32:00Z</published>
    <updated>2017-05-16T21:32:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;You know that interviewing is a painful and expensive problem when your friends
send you pages worth of questions that they use to evaluate future employers.&lt;/p&gt;

&lt;p&gt;These questions come from an experienced senior systems engineer friend of mine.
They gave me permission to publish, but asked to remain anonymous. This person
is currently interviewing.&lt;/p&gt;

&lt;p&gt;If you're not looking to hire systems engineers, this article is less relevant
to you, but I think you'll still find it valuable.&lt;/p&gt;

&lt;p&gt;– David&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Anonymous writes…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Things I want to know about a prospective employer. At the conclusion of this list, I will attempt to define questions that will elicit the answers to these questions. Note that the questions actually asked may not necessarily correspond to the questions that one wants to ask.&lt;/p&gt;

&lt;h2 id="what-i-really-want-to-know"&gt;What I Really Want to Know&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Project prioritization
    &lt;ul&gt;
      &lt;li&gt;What metrics are used to guide prioritization efforts?&lt;/li&gt;
      &lt;li&gt;What do project proposals look like? Are engineers forced to clearly define the problem or do they just propose various things they want to do?&lt;/li&gt;
      &lt;li&gt;Does someone maintain a backlog of potential projects and reassess things periodically?&lt;/li&gt;
      &lt;li&gt;Is there a centralized individual who selects what goes into a release from the top down, or are individual teams empowered to do their own prioritization?&lt;/li&gt;
      &lt;li&gt;How are projects staffed? In particular, how are projects that nobody &lt;em&gt;wants&lt;/em&gt; to do staffed? It’s easy to find people to work on projects that will have high visibility or a technically rewarding environment, but the real test of culture is how gaps are identified and staffed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Software development lifecycle process
    &lt;ul&gt;
      &lt;li&gt;What’s the code review process like?&lt;/li&gt;
      &lt;li&gt;How strictly are requirements enforced when it comes to getting reviews and performing automated testing?&lt;/li&gt;
      &lt;li&gt;Do developers write both code and tests, or is there an organizational split between development and QA?&lt;/li&gt;
      &lt;li&gt;How are conflicts mediated, both on the design level and the implementation level?&lt;/li&gt;
      &lt;li&gt;What’s the average time required to fix an “average sized” bug, from receiving the bug to closing it? Large times would reveal inefficiencies in the software development lifecycle. Over 8 hours saps motivation. Under 4 hours is a huge dopamine rush for highly productive developers. :)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Approach to quality &amp;amp; technical debt
    &lt;ul&gt;
      &lt;li&gt;Are people who introduce technical debt held accountable for removing it?&lt;/li&gt;
      &lt;li&gt;Is technical debt tracked at all?&lt;/li&gt;
      &lt;li&gt;When was the last time someone was promoted for their work on technical debt and other “hard to quantify” things (like developer productivity, internal infrastructure, build and test frameworks, etc.)&lt;/li&gt;
      &lt;li&gt;Are corporate and cultural incentives set up for adding or removing technical debt?&lt;/li&gt;
      &lt;li&gt;What is the ratio of short-term fixes to long-term fixes (and why)?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Remote work and WFH policy&lt;/li&gt;
  &lt;li&gt;How do you grow engineers? How important is mentorship to company culture?&lt;/li&gt;
  &lt;li&gt;How do you give constructive feedback…
    &lt;ul&gt;
      &lt;li&gt;…to managers?&lt;/li&gt;
      &lt;li&gt;…to other engineers?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Are you hiring too fast or too slow?&lt;/li&gt;
  &lt;li&gt;What is your policy towards brilliant jerks?&lt;/li&gt;
  &lt;li&gt;What is your policy towards open source?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="be-careful"&gt;Be careful:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t come across as lazy when asking about WFH policies&lt;/li&gt;
  &lt;li&gt;Avoid using the phrase “technical debt” directly, as you don’t want to come across as an engineer who won’t provide high business value&lt;/li&gt;
  &lt;li&gt;Avoid the phrase “unfortunately”, as you want to come across as someone who builds things up rather than puts things down&lt;/li&gt;
  &lt;li&gt;Ask innocent, friendly, and natural questions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="safer-phrasings-that-get-at-the-same-answers"&gt;Safer Phrasings That Get at the Same Answers&lt;/h2&gt;

&lt;p&gt;The following practical questions might provide insights into the above theoretical questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Re: build and continuous integration system, test frameworks, and technical debt:
    &lt;ul&gt;
      &lt;li&gt;When was the last time someone made a meaningful contribution to software development lifecycle and developer productivity tooling? Tell me how they went about it (both organizationally and technically).&lt;/li&gt;
      &lt;li&gt;Do developers push code and tests at the same time (to the same repository), or is there a separate QA organization that writes tests asynchronously from features being pushed?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Show me a “non trivial” code review (use this to asses quality standards, the review process, the no asshole rule, and testing requirements):
    &lt;ul&gt;
      &lt;li&gt;Ask how things are handled when you ask someone to make a change and they don’t want to do it. Is the default policy to “file a bug” and do it later? Do those bugs just get closed out in two months, or is action ever taken? When the problematic code ends up causing production issues, does the issue come back to the person who wrote it?&lt;/li&gt;
      &lt;li&gt;How do you resolve arguments about code style? Do engineers waste colossal amounts of time arguing about style in reviews, or are there automated style checks and formatting tools that allow the discussion to shift toward matters of substance?&lt;/li&gt;
      &lt;li&gt;Note: you can’t ask a new hire this question, you need to ask a long-time employee who has been around the block and seen how things play out&lt;/li&gt;
      &lt;li&gt;Did the developer have to re-run tests due to flakiness? Is there a dashboard showing the state of the build? Are flaky tests tracked? Are there metrics regarding how often tests flake so that the most flaky areas can be addressed?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What are the attributes that get people promoted?
    &lt;ul&gt;
      &lt;li&gt;Be specific: Ask when the last time a close colleague was promoted and what they did to earn the promotion.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Whose responsibility, if any, is developer productivity?
    &lt;ul&gt;
      &lt;li&gt;“Everyone’s responsibility” is the worst possible answer to this question, as it means “nobody’s responsibility”&lt;/li&gt;
      &lt;li&gt;If answers are vague, follow up with: “What was the last thing you did personally?”
        &lt;ul&gt;
          &lt;li&gt;Risk: This might embarrass the person if they did nothing.&lt;/li&gt;
          &lt;li&gt;This is a bit hardball, only go this far if you must.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How does the culture change near the end of the release?
    &lt;ul&gt;
      &lt;li&gt;Does all hell break loose and people just push low quality code to get things out the door?&lt;/li&gt;
      &lt;li&gt;If so, how is the remaining work to “do it right” tracked?&lt;/li&gt;
      &lt;li&gt;What is the power relationship between engineers and managers? Do managers strongly imply you need to work late nights and long hours to ship a release?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How do engineers interact with customers?
    &lt;ul&gt;
      &lt;li&gt;A bit of a fluff question, but can reveal a fair amount about how the company works. Can engineers own a problem from customer interaction to solution, or are they just cogs in the wheel of a giant organization of salespeople and product managers?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How much time have mentors spent with interns and/or new hires this year?
    &lt;ul&gt;
      &lt;li&gt;Goal should be to find a company where mentorship is valued. Mentors shouldn’t blink at the idea of dropping whatever they’re doing for 2 hours to help a mentee (assuming the mentee is worth their time investment).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What is the weirdest bug that you’ve worked on recently?
    &lt;ul&gt;
      &lt;li&gt;Goal is to see how the organization responds to failure&lt;/li&gt;
      &lt;li&gt;How did you fix it in the short-term?&lt;/li&gt;
      &lt;li&gt;How did you fix it in the long-term?
        &lt;ul&gt;
          &lt;li&gt;This is the most interesting part&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;You ideally want to be at a company with good war stories, because then people are excited to do their job&lt;/li&gt;
      &lt;li&gt;Do people actually debug things, or just work around them and restart it?&lt;/li&gt;
      &lt;li&gt;Does the company have a culture of root causing issues on first failure, or do they just throw their hands in the air if they can’t reproduce the issue?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;– Anonymous&lt;br /&gt;
Senior systems engineer in the SF bay area&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;David here. You may see the pattern: more senior people, even those who are
extremely technical, want high autonomy work, and want to be involved in
business decisions. They want to avoid teams and managers where they're just
another pair of hands, where no one tracks the impact of engineering work. They
want their engineering leaders to perceive the kinds of rot and dysfunction that
are difficult to explain to non-technical decision-makers.&lt;/p&gt;

&lt;p&gt;You'll also notice that even someone who is more senior is cautious about asking
hard questions. Interestingly, I ask similar questions in my interviews for full
stack growth engineering positions, although they lean towards growth.&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David&lt;br /&gt;
david ått dtrejo.com&lt;/p&gt;

&lt;p&gt;PS Want to impress all your engineering candidates with how great you and your company are? Email me, I can help.&lt;/p&gt;

&lt;p&gt;PPS Tomorrow I'll be writing and sending my book review of Moneyball–you're going to like it because you'll get a better feel for how to measure &amp;amp; value engineering work.&lt;/p&gt;

&lt;p&gt;In the mean time, I made this tool for you: &lt;a href="http://engineerworth.com/"&gt;EngineerWorth.com&lt;/a&gt;–it helps you calculate whether an engineering feature will pay back the time investment. You can drag the numbers to adjust them to your situation.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tools for Hiring Engineers That Save Time and Increase Conversion</title>
    <link rel="alternate" href="https://dtrejo.com/tools-for-hiring-engineers.html"/>
    <id>https://dtrejo.com//tools-for-hiring-engineers.html</id>
    <published>2017-05-15T17:40:00Z</published>
    <updated>2017-05-15T17:40:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;Eric Zhang (CTO at Scalable Press) requested that I write him this article (thanks for the request Eric!).&lt;/p&gt;

&lt;p&gt;The tools in this article will help you drop fewer referral candidates and normal candidates; get more applicants for positions for which aren't "open" yet; avoid scheduling hell; and increase your ratio of referrals hires to 40%+ (this is desirable because they are easier to hire).&lt;/p&gt;

&lt;h2 id="open-prospects-and-referral-candidates-who-arent-ready-to-apply"&gt;Open Prospects and Referral Candidates Who Aren't Ready to Apply&lt;/h2&gt;
&lt;p&gt;An open prospect is someone who has yet to be qualified or disqualified. There are a few kinds of people who are big fans of you and your company, but you probably don't talk to them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Referrals who aren't ready to apply (this is the most important one)&lt;/li&gt;
  &lt;li&gt;People who declined your offer&lt;/li&gt;
  &lt;li&gt;People who applied to be interns years ago (and are now experienced)&lt;/li&gt;
  &lt;li&gt;People from the internet who are amazing, but don't yet know enough about you or who suspect their online application will go into a black whole (as it is with most online applications)&lt;/li&gt;
  &lt;li&gt;People you rejected years ago&lt;/li&gt;
  &lt;li&gt;People from the internet who may or may not be good enough to pass your interviews (yet!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea behind this section is give you some tools to help you start talking to them. We want them to think of you and apply, or educate themselves to the point that they'd pass your interviews.&lt;/p&gt;

&lt;p&gt;You can make them feel special and remember you with very little effort by giving all your open prospects access to your CTO…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Email them engineering articles written by your team.&lt;/li&gt;
  &lt;li&gt;Email them open positions; newly opened positions; and future positions along with your salary ranges. Why include salary for open positions? &lt;a href="https://dtrejo.com/why-share-salary.html"&gt;Because it is valuable to the reader to help them understand their market value&lt;/a&gt;. There are many more underpaid but good engineers than you imagine.&lt;/li&gt;
  &lt;li&gt;Send from your CTO's email&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You'll also find this email list useful because right now, each of your referral candidates gets vastly different amounts of information about your company, depending on how much your engineer talks to them. By putting everyone interested in you on this list, you get every candidate to a base level of understanding (and interest) in your company. You'll also get a better feel for your top of funnel.&lt;/p&gt;

&lt;h3 id="tools-to-nurture-open-prospects"&gt;Tools to Nurture Open Prospects&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;80% good enough option: &lt;a href="http://tinyletter.com/"&gt;Tinyletter.com&lt;/a&gt; (free). Since it doesn't do drip emails, you can include links to relevant engineering articles in the confirmation email.&lt;/li&gt;
  &lt;li&gt;Pro option: &lt;a href="https://www.drip.co/"&gt;drip.co&lt;/a&gt;. Free for under 100 subscribers. Like Tinyletter, requires permission (a good thing).&lt;/li&gt;
  &lt;li&gt;Pro option: &lt;a href="https://www.lever.co/nurture"&gt;Lever Nurture&lt;/a&gt;. Leans towards outreach, but also does nurturing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="coffee-and-scheduling-hell"&gt;Coffee and Scheduling Hell&lt;/h2&gt;
&lt;p&gt;Every engineer on your team probably gets coffee, lunch, or drinks with people who're interested in working for you. Everyone on your team should have a &lt;a href="https://calendly.com/"&gt;Calendly.com&lt;/a&gt; link (free). Scheduling manually is worse for both your team and your candidate. From a candidate's perspective, scheduling is one of the most low value, time-consuming and annoying parts of the interview process.&lt;/p&gt;

&lt;h2 id="stop-dropping-people"&gt;Stop Dropping People&lt;/h2&gt;
&lt;p&gt;Everyone on your team should use a tool that returns emails to their inbox if they don't get a reply. You probably already use an applicant tracking system, but I suspect you still drop candidates.&lt;/p&gt;

&lt;p&gt;An email reminder tool will help you avoid the following situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Candidate expresses interest, but gets dropped by recruiting&lt;/li&gt;
  &lt;li&gt;Engineer refers someone, but they get dropped&lt;/li&gt;
  &lt;li&gt;Referral gets rejected, but engineer never gets told how their referral did (and engineer stops referring people–bad!)&lt;/li&gt;
  &lt;li&gt;Recruiting forgets to reject a candidate, resulting in a bad experience for the candidate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As engineers we tend to be very sensitive about overloading other people's inboxes. This is not the time to be timid about cc'ing the referring engineer on every email. You &lt;strong&gt;want&lt;/strong&gt; to pay the candidate six figures, and you &lt;strong&gt;want&lt;/strong&gt; to pay the referrer their bonus. Archiving an email takes seconds. What's more important?&lt;/p&gt;

&lt;h2 id="tools-to-avoid-dropping-candidates"&gt;Tools to Avoid Dropping Candidates&lt;/h2&gt;
&lt;p&gt;I use &lt;a href="http://www.boomeranggmail.com/"&gt;Boomerang&lt;/a&gt; ($49/year). You may also like &lt;a href="https://mixmax.com/"&gt;Mixmax&lt;/a&gt; ($108/year, it does more). On my wish list is a "return &lt;strong&gt;every&lt;/strong&gt; 2 days if no reply" feature. Boomerang has this for more expensive plans. I don't believe Mixmax has this feature (hi Jen &amp;amp; Olof!). If you're too small to use a paid ATS, &lt;a href="https://www.streak.com/"&gt;Streak.com&lt;/a&gt; can be a good free option.&lt;/p&gt;

&lt;p&gt;You have an SLA for your product, why not for your hiring process?&lt;/p&gt;

&lt;h2 id="offer-letters"&gt;Offer Letters&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href="https://www.remarq.io/"&gt;Remarq.io&lt;/a&gt; ($19-$59/mo). Sending an offer shouldn't mean an exec needs to open Word. Remarq limits the number of unique documents (offers) you can send per month, which might be a problem for you.&lt;/p&gt;

&lt;p&gt;Alternatively, Google docs is a good option, as you can insert charts from Google Sheets into into your Google doc. Charts are useful to show growth trajectories and what they mean for the value of the candidate's equity.&lt;/p&gt;

&lt;h2 id="engineering-referrals"&gt;Engineering Referrals&lt;/h2&gt;
&lt;p&gt;Consider &lt;a href="http://teamable.com/"&gt;Teamable&lt;/a&gt;. Teamable prioritizes diverse referrals and helps companies reach 40%+ referral hires. I couldn't find public pricing. If you want a free option, email me and maybe I'll tell you my secrets :)&lt;/p&gt;

&lt;p&gt;What tools do you and your engineering team use to make hiring easier? Send me an email :)&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David&lt;br /&gt;
david ått dtrejo.com&lt;/p&gt;

&lt;p&gt;PS I've just finished reading Moneyball, which is about how the Oakland A's baseball team bought great players even with very little money. I'll be sending out a book review of it in the next couple days, along with a section on how it applies to engineering hiring (so you can hire better engineers for less).&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>How to Reliably Get Your Team to Write Articles for Your Engineering Blog</title>
    <link rel="alternate" href="https://dtrejo.com/how-to-reliably-get-your-team-to-write-articles-for-your-engineering-blog.html"/>
    <id>https://dtrejo.com//how-to-reliably-get-your-team-to-write-articles-for-your-engineering-blog.html</id>
    <published>2017-04-23T21:54:00Z</published>
    <updated>2017-04-23T21:54:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;You probably already know why it's so helpful to have your team write
engineering articles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They're massively useful for recruiting, even if only a few people read them&lt;/li&gt;
  &lt;li&gt;If many people read your articles, you'll get tons more applicants&lt;/li&gt;
  &lt;li&gt;If you sell to developers, your articles create trust and lead to more
  sales, on top of the above&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="how-do-you-get-an-engineer-to-write-an-article"&gt;How do you get an engineer to write an article?&lt;/h2&gt;

&lt;p&gt;You don't. Instead you ask them over email:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"How does X work?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tip is from &lt;a href="https://twitter.com/melindakjacobs"&gt;Melinda Jacobs&lt;/a&gt;, CEO of
&lt;a href="https://www.lucentsky.com/"&gt;Lucent Sky&lt;/a&gt;. Her company automatically finds
vulnerabilities in your code and fixes many of them (which is
great for banks who have so many vulnerabilities that their security teams can't
possibly fix them all manually &lt;code&gt;:)&lt;/code&gt;. Thanks Melinda!&lt;/p&gt;

&lt;p&gt;Now, ask an engineer on your team and you'll get a detailed explanation of how some
part of your product works.  If you &lt;strong&gt;&lt;em&gt;know&lt;/em&gt;&lt;/strong&gt; they left out something impressive, ask
again after their initial answer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"I was really impressed with your work on Y, can you explain how that works too?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then you take their answers, &lt;a href="https://dtrejo.com/how-to-write-consistently-painlessly-and-without-writers-block.html#when-youre-ready-to-start-editing-these-writing-tools-will-come-in-handy"&gt;edit them with these tips&lt;/a&gt;,
run it by them to see if they have any suggestions, and publish. If
you're an engineer like me, I'd recommend you don't let them make the edits
themselves–they may get hung up on them. Instead ask them for feedback over email
or in a quick read-through and make the changes for them.&lt;/p&gt;

&lt;p&gt;It's up to you to make remember to ask your team to write articles after they
finish interesting projects. Remember, to an outsider, boring projects can be
just as interesting because they demonstrate mature, boring
technology&lt;sup&gt;†&lt;/sup&gt;. Projects with large business impact are also very
interesting, especially to engineers who care about business results.&lt;/p&gt;

&lt;p&gt;Take a minute right now to add a link to this article in your sprint
retrospectives (or planning cycle retrospectives). Otherwise you may forget to
put this advice into practice.&lt;/p&gt;

&lt;h2 id="a-published-article-is-worth-more-than-1000-unpublished-articles"&gt;A published article is worth more than 1,000 unpublished articles&lt;/h2&gt;

&lt;p&gt;Work on the article until you're 80% happy with it, then publish it. If you're
being ruthless with yourself, one hour total invested in the article is a
reasonable timeline. If you have extreme difficulty with a particular sentence,
the easiest way to fix it is to delete it &lt;code&gt;:)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="why-does-melindas-method-work-well"&gt;Why does Melinda's method work well?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;People write emails in complete sentences&lt;/li&gt;
  &lt;li&gt;People write like they speak, meaning it reads more naturally&lt;/li&gt;
  &lt;li&gt;People rarely have writer's block when it comes to explaining things to coworkers&lt;/li&gt;
  &lt;li&gt;People love to be recognized for their work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it, good luck!&lt;br /&gt;
David&lt;/p&gt;

&lt;p&gt;PS Do you have an engineering hiring tip you'd like me write up? Email me: david att dtrejo dot com.&lt;/p&gt;

&lt;p&gt;† Boring Technology, for example &lt;a href="http://mcfunley.com/choose-boring-technology"&gt;Choose Boring Technology&lt;/a&gt; &lt;a href="http://mcfunley.com/choose-boring-technology-slides"&gt;(slides)&lt;/a&gt; by Dan McKinley, Founder at Skyliner;
&lt;a href="https://www.slideshare.net/dianachow/marty-weiner-reddit-cto-sxswi-2016-everythings-harder-at-scale/1"&gt;"The boring tech revolution is here"&lt;/a&gt; by Reddit CTO Marty Weiner;
&lt;a href="https://github.com/yoshuawuyts/tiny-guide-to-non-fancy-node"&gt;Non-fancy Node&lt;/a&gt; by Yoshua Wuyts, author of 372 node modules.&lt;/p&gt;
</content>
  </entry>
</feed>
