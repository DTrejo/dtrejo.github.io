<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David Trejo | Developer and Consultant</title>
  <subtitle>DTrejo's Developer Tips</subtitle>
  <id>http://dtrejo.com/</id>
  <link href="http://dtrejo.com/"/>
  <link href="http://dtrejo.com/feed.xml" rel="self"/>
  <updated>2015-11-13T02:36:00Z</updated>
  <author>
    <name>DTrejo</name>
  </author>
  <entry>
    <title>How I Can Help You</title>
    <link rel="alternate" href="http://dtrejo.com/help.html"/>
    <id>http://dtrejo.com//help.html</id>
    <published>2015-11-13T02:36:00Z</published>
    <updated>2015-11-13T02:36:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;What follows is a mix of simpler and more difficult things you can ask me about for advice. This is not a list of services.&lt;/p&gt;



&lt;h2 id="software-engineering"&gt;Software Engineering&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Understanding callbacks&lt;/li&gt;
  &lt;li&gt;Understanding how to avoid callback hell by using named functions, and async.parallel/series for the rest of the cases.&lt;/li&gt;
  &lt;li&gt;Learning what constitutes idiomatic node code (modularity, good abstraction, etc. Best learned via code review)&lt;/li&gt;
  &lt;li&gt;Advising you on what modules to use so you get work done faster by using other people's code&lt;/li&gt;
  &lt;li&gt;Coding conventions that will help you avoid errors such as uncalled callbacks&lt;/li&gt;
  &lt;li&gt;Setting up / trying out browserify&lt;/li&gt;
  &lt;li&gt;Setting up / trying out stylus&lt;/li&gt;
  &lt;li&gt;As an inactive contributor to &lt;code&gt;mranney/node_redis&lt;/code&gt;, if you have any questions it's likely that I can help (can tell you about distributed systems, what redis is good for, what the other nosql's are good for, and am slightly familiar with the &lt;code&gt;node_redis&lt;/code&gt; codebase)&lt;/li&gt;
  &lt;li&gt;Learn to use git like it's easy — rebase, manage branches, take pull requests quickly, use git's reflog to undo a git command that went wild and screwed up all your work.&lt;/li&gt;
  &lt;li&gt;How to break into software engineering if you just learned to code&lt;/li&gt;
  &lt;li&gt;How to run a software engineering intern program&lt;/li&gt;
  &lt;li&gt;Good ways to recruit at brown, both officially and unofficially&lt;/li&gt;
  &lt;li&gt;How to value equity (hint: 0)&lt;/li&gt;
  &lt;li&gt;How to figure out if a startup is good to work for&lt;/li&gt;
  &lt;li&gt;How to negotiate your salary&lt;/li&gt;
  &lt;li&gt;How all money is made on the internet&lt;/li&gt;
  &lt;li&gt;How to learn to code&lt;/li&gt;
  &lt;li&gt;How to make a two-sided marketplace with Paypal API&lt;/li&gt;
  &lt;li&gt;How to use the Google Calendar and Youtube API from node&lt;/li&gt;
  &lt;li&gt;How to choose colors for your site if you suck at color&lt;/li&gt;
  &lt;li&gt;How to use a pull request checklist to increase the quality of your code&lt;/li&gt;
  &lt;li&gt;How to use a deploy checklist for less risky deploys&lt;/li&gt;
  &lt;li&gt;Whether you should read…
    &lt;ul&gt;
      &lt;li&gt;Open Book Management&lt;/li&gt;
      &lt;li&gt;Microsoft's academic papers about a/b testing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="college-counseling--independent-educational-consulting"&gt;College Counseling &amp;amp; Independent Educational Consulting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to get more students&lt;/li&gt;
  &lt;li&gt;How to schedule workshops at local high-schools&lt;/li&gt;
  &lt;li&gt;How to get a Yelp review taken down in under 12 hours if you're lucky.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="consulting"&gt;Consulting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to write a proposal&lt;/li&gt;
  &lt;li&gt;How to ask for referrals (and when)&lt;/li&gt;
  &lt;li&gt;How to get an amazing testimonial&lt;/li&gt;
  &lt;li&gt;How to get your first client(s)&lt;/li&gt;
  &lt;li&gt;How to get paid from day 1&lt;/li&gt;
  &lt;li&gt;How to raise your rates&lt;/li&gt;
  &lt;li&gt;How to organize and run your sales process&lt;/li&gt;
  &lt;li&gt;How to choose a niche&lt;/li&gt;
  &lt;li&gt;How to research a new service offering&lt;/li&gt;
  &lt;li&gt;How to convince your clients that a roadmapping session is an important first step prior to custom engineering work&lt;/li&gt;
  &lt;li&gt;How to work to work your best with a designer&lt;/li&gt;
  &lt;li&gt;How to test your value prop with content marketing using "the problem post." also helps you do customer development.&lt;/li&gt;
  &lt;li&gt;How to do respectful professional intros&lt;/li&gt;
  &lt;li&gt;How to do a good handshake&lt;/li&gt;
  &lt;li&gt;How payment before starting work helps both you and the client be more successful&lt;/li&gt;
  &lt;li&gt;Whether you should read…
    &lt;ul&gt;
      &lt;li&gt;Managing the Professional Service Firm&lt;/li&gt;
      &lt;li&gt;Book Yourself Solid&lt;/li&gt;
      &lt;li&gt;How to Measure Anything&lt;/li&gt;
      &lt;li&gt;Inc Yourself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="writing"&gt;Writing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to write great cold emails to drive calls with buyer/decider&lt;/li&gt;
  &lt;li&gt;How to write a sales page&lt;/li&gt;
  &lt;li&gt;How to write your resume&lt;/li&gt;
  &lt;li&gt;How to write to your value and outcomes, not simply your action and movement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="sales"&gt;Sales&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to do outbound sales with cold emails in a way that works&lt;/li&gt;
  &lt;li&gt;Puppy dog sales technique (don't feel salesy on the call, yet still make a sale eventually if it makes sense)&lt;/li&gt;
  &lt;li&gt;How to design a sales page by stealing from a massive list of examples&lt;/li&gt;
  &lt;li&gt;How many times to follow up&lt;/li&gt;
  &lt;li&gt;How to keep track of your prospects&lt;/li&gt;
  &lt;li&gt;How to get anyone's email&lt;/li&gt;
  &lt;li&gt;Whether you should read…
    &lt;ul&gt;
      &lt;li&gt;Predictable Revenue&lt;/li&gt;
      &lt;li&gt;Pricing with Confidence&lt;/li&gt;
      &lt;li&gt;Barking up a Dead Horse&lt;/li&gt;
      &lt;li&gt;How to Ask for the Moon and Get it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="marketing"&gt;Marketing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to choose a good name&lt;/li&gt;
  &lt;li&gt;How to position yourself in the space of alternatives to your product or service&lt;/li&gt;
  &lt;li&gt;How to use drip campaigns&lt;/li&gt;
  &lt;li&gt;How to get 17% more conversion on your AdWords &lt;em&gt;with&lt;/em&gt; lots of effort&lt;/li&gt;
  &lt;li&gt;How to improve your SEO&lt;/li&gt;
  &lt;li&gt;Whether you should read…
    &lt;ul&gt;
      &lt;li&gt;The Brain Audit&lt;/li&gt;
      &lt;li&gt;The Positioning Manual for Technical Firms&lt;/li&gt;
      &lt;li&gt;My Life in Advertising&lt;/li&gt;
      &lt;li&gt;Positioning, by reis and trout&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="food"&gt;Food&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to make amazing steak&lt;/li&gt;
  &lt;li&gt;How to make Arepas&lt;/li&gt;
  &lt;li&gt;How to take care of your chef's knife&lt;/li&gt;
  &lt;li&gt;How to take care of your cast iron pan&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="self-care"&gt;Self Care&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to get work done with a sense of accomplishment and eliminate multitasking by organizing yourself with a Kanban board.&lt;/li&gt;
  &lt;li&gt;How to give yourself a second brain with notational.net&lt;/li&gt;
  &lt;li&gt;How to fix your hands if you coded too much&lt;/li&gt;
  &lt;li&gt;Who to talk to for style advice&lt;/li&gt;
  &lt;li&gt;How to know if you are getting mildly depressed&lt;/li&gt;
  &lt;li&gt;How to know if you are sleeping enough&lt;/li&gt;
  &lt;li&gt;How to know if you are drinking enough water&lt;/li&gt;
  &lt;li&gt;How to decide what kind of lifestyle you want and work back from there to decide what you want to do with your life&lt;/li&gt;
  &lt;li&gt;How to tie your shoes so they don't come undone&lt;/li&gt;
  &lt;li&gt;How to actually work out: join a class and make friends&lt;/li&gt;
  &lt;li&gt;How to easily swallow vitamins&lt;/li&gt;
  &lt;li&gt;How to not get razor burn, not cut yourself, and get a way better shave with a safety razor and proper technique&lt;/li&gt;
  &lt;li&gt;How to not get cavities: no sugar/carbs&lt;/li&gt;
  &lt;li&gt;Whether you should read…
    &lt;ul&gt;
      &lt;li&gt;The Trigger Point Workbook&lt;/li&gt;
      &lt;li&gt;Body by Science&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="other"&gt;Other&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;How to buy a road bike&lt;/li&gt;
  &lt;li&gt;What you should do to get your kid into Brown (where I went).&lt;/li&gt;
  &lt;li&gt;How to not hate noisy parties&lt;/li&gt;
  &lt;li&gt;How divorce is not so bad for your kids&lt;/li&gt;
  &lt;li&gt;Whether you should read…
    &lt;ul&gt;
      &lt;li&gt;How to Ask for the Moon and Get it&lt;/li&gt;
      &lt;li&gt;How to Win Friends and Influence People&lt;/li&gt;
      &lt;li&gt;The Black Swan&lt;/li&gt;
      &lt;li&gt;Learned Optimism&lt;/li&gt;
      &lt;li&gt;Fooled by Randomness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send me an email about any of these, I'd be happy to discuss it with you.&lt;/p&gt;

&lt;p&gt;Yours,
David Trejo&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why is Node Being Forked?</title>
    <link rel="alternate" href="http://dtrejo.com/why-is-node-being-forked.html"/>
    <id>http://dtrejo.com//why-is-node-being-forked.html</id>
    <published>2014-10-09T19:11:00Z</published>
    <updated>2014-10-09T19:11:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="node logo" alt="" width="212" height="114" src='http://dtrejo.com/images/new-nodejs-logo.png?1448761099' /&gt;&lt;/p&gt;

&lt;p&gt;As of October 9th I learned that &lt;a href="http://github.com/joyent/node"&gt;Node&lt;/a&gt; is being forked!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mikeal/status/520285400279965698"&gt;&lt;img alt="Why is node being forked? tweet" alt="" width="707" height="333" src='http://dtrejo.com/images/why-is-node-being-forked-tweet1.png?1448761099' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I asked someone close to this, "what is the reason for the fork?"&lt;/p&gt;

&lt;p&gt;It turns out that some contributors* are forking because Node is currently run
by a Benevolent Dictator For Life (BDFL), and these contributors are interested
in running it by committee.&lt;/p&gt;

&lt;p&gt;Here is a video on the subject, where these contributors discuss the
effort:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloudup.com/cMfev4cebay"&gt;https://www.youtube.com/watch?v=fNW_tu2QnpA&lt;/a&gt; (37 mins; re-uploaded)&lt;/p&gt;

&lt;p&gt;Interesting notes from the video:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;they are considering hiring a full-time person to triage bugs on Node&lt;/li&gt;
  &lt;li&gt;they wish they could share bug-closing and bug-management abilities on the
&lt;a href="http://github.com/joyent/node"&gt;joyent/node&lt;/a&gt; Github (but Github itself does not make this easy without giving direct commit access),&lt;/li&gt;
  &lt;li&gt;For the near-term, they are considering spending 3 hours per week doing bug
triage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the leaders of this, with their names and their rank as a contributor
to &lt;a href="http://github.com/joyent/node"&gt;node&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;#2&lt;/code&gt; Isaac Schlueter (and former BDFL)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#3&lt;/code&gt; Ben Noordhuis [Mikeal pointed out that I forgot Ben, thank you Mikeal!]&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#4&lt;/code&gt; Bert Belder&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#5&lt;/code&gt; Fedor Indutny&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#7&lt;/code&gt; Trevor Norris&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#27&lt;/code&gt; Mikeal Rogers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a bystander to this, I hope that when the dust settles, Node's stability and
progress have not been adversely affected. I know for a fact that all of these
people have better things to do than forking node (running their businesses for
example). I have no doubt that this whole thing is a big headache for everyone,
and hopefully the headache goes away soon (they would not be forking if they
didn't have good reasons).&lt;/p&gt;

&lt;p&gt;Have a good day,&lt;br /&gt;
David Trejo&lt;/p&gt;

&lt;h2 id="more-information"&gt;More information&lt;/h2&gt;

&lt;p&gt;Here a video of the previous meeting (25 mins; re-uploaded):
&lt;a href="https://cloudup.com/cMfev4cebay"&gt;https://www.youtube.com/watch?v=X5PtRHjUO1U&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a link to the node fork: &lt;a href="https://github.com/node-forward/node"&gt;https://github.com/node-forward/node&lt;/a&gt;&lt;/p&gt;

&lt;!-- [vid1]:https://www.youtube.com/watch?v=fNW_tu2QnpA --&gt;
&lt;!-- [vid2]:https://www.youtube.com/watch?v=X5PtRHjUO1U --&gt;
</content>
  </entry>
  <entry>
    <title>How to Buy and Cook Steak</title>
    <link rel="alternate" href="http://dtrejo.com/how-to-buy-and-cook-steak.html"/>
    <id>http://dtrejo.com//how-to-buy-and-cook-steak.html</id>
    <published>2014-07-27T21:36:00Z</published>
    <updated>2014-07-27T21:36:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;Steak. It's fucking delicious. Here's how I make it.&lt;/p&gt;

&lt;p&gt;The first half of this post is a piece on how to buy steak, by &lt;a href="http://ericzhang.com"&gt;Eric Zhang&lt;/a&gt;. What follows are directions on how
to prepare it, down to the most minute (but crucial) details.&lt;/p&gt;



&lt;h2 id="how-to-buy-steak"&gt;How to Buy Steak&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;by &lt;a href="http://ericzhang.com"&gt;Eric Zhang&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;yo
&lt;br /&gt;so
&lt;br /&gt;about buying steak
&lt;br /&gt;most important thing is the cut of steak
&lt;br /&gt;namely where the meat is cut from
&lt;br /&gt;safeway is the best place to buy steak around here
&lt;br /&gt;trader joes/wholefoods offer shitty steak
&lt;br /&gt;costco is even better than safeway but has much higher prices for that quality
&lt;br /&gt;so basically
&lt;br /&gt;you want one of these cuts
&lt;br /&gt;: new york, rib eye, t-bone
&lt;br /&gt;disregard all other steak
&lt;br /&gt;disregard, top sirloin, round, chuck, 7 bone, tri tip, all of those, they don't exist, they suck
&lt;br /&gt;good steak is new york rib eye or tbone
&lt;br /&gt;you may have also heard of filet mignon
&lt;br /&gt;it's fucking expesive and hard to cook right, don't bother, safeway doesn't offer good filet mignon
&lt;br /&gt;filet mignon simply means a steak cut from the tenderloin
&lt;br /&gt;t-bone is a combo cut of new york and tenderloin steak together, so t bone is tasty
&lt;br /&gt;rib eye is easiest to cook cuz it has best marbling
&lt;br /&gt;marbling is the amount of fat "strands" inside the lean muscle, hence giving a marbled &lt;br /&gt;appearance
&lt;br /&gt;top notch marbling:
&lt;br /&gt;&lt;img alt="" width="540" height="348" src="http://dtrejo.com/images/top-notch-marbling.jpg?1448761099" /&gt;
&lt;br /&gt;
&lt;br /&gt;very shitty marbling:
&lt;br /&gt;&lt;img alt="" width="300" height="161" src="http://dtrejo.com/images/shitty-markbling-toproundsteak.jpg?1448761099" /&gt;
&lt;br /&gt;
&lt;br /&gt;marbling is 2nd most important thing when buying steaks
&lt;br /&gt;you want more marbling
&lt;br /&gt;marbling is what gives steak deliciousness and makes it easier to cook
&lt;br /&gt;at safeway, for same cut and price, you'll see all sorts of levels of marbling
&lt;br /&gt;look through all the available packages to find the one with best marbling
&lt;br /&gt;so to reiterate
&lt;br /&gt;when buying a steak
&lt;br /&gt;1. most important is cut, buy a rib eye, new york, or t-bone
&lt;br /&gt;2. choose the package with most marbling
&lt;br /&gt;now a note regarding prices
&lt;br /&gt;every other week, safeway has a generous sale on one of those cuts
&lt;br /&gt;safeways sales run on a wednesday - tuesday cycle
&lt;br /&gt;typical sale prices are as follows
&lt;br /&gt;new york, rib eye: 5.99/lb
&lt;br /&gt;t-bone 6.99/lb
&lt;br /&gt;(for bone-in), boneless costs more
&lt;br /&gt;do not pay more than these prices, it will go on sale guaranteed
&lt;br /&gt;if you can find boneless new york or rib eye (no such thing as boneless t-bone) for $7.99, &lt;br /&gt;that is an acceptable price
&lt;br /&gt;this week safeway has bone-in new york or t-bone for 7.99
&lt;br /&gt;if you need it this week, then buy those, otherwise next wednesday there will be lower prices
&lt;br /&gt;stay away from top sirloin
&lt;br /&gt;people think thats good steak cuz they serve it at outback steakhouse
&lt;br /&gt;it is an inferior cut to new york/ rib eye/ tbone/ tenderloin
&lt;br /&gt;its only good at restaurant cuz they marinade it in wine which increases tenderness and flavor but you lose the natural beef flavor&lt;/p&gt;

&lt;p&gt;Addendum by David:
Rib eye is also known as Delmonaco. It is said that bone-in gives better flavor.
Thicker steak cooks slower so it's easier to cook it rare, or medium-rare. You
should not cook steak well-done, and only cook medium by accident. Well-done is
a crime.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;GREAT! Now you know how to buy steak. Let's cook:&lt;/p&gt;

&lt;h1 id="how-to-cook-steak"&gt;How to Cook Steak&lt;/h1&gt;

&lt;p&gt;If you successfully follow my directions, your steak will taste far better than what you've had in restaurants.
Restaurant chefs don't have time to put this much love into each steak.
Much of this is sourced from celebrity Chef Jamie Oliver — relevant videos are
included at the end of the post.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An hour prior to cooking, remove the steak from the fridge. It should be close to room temperature.
    &lt;ul&gt;
      &lt;li&gt;The warmer the meat, the less temperature difference, the better the crusting
on the outside. The moisture shed from being cold prevents crusting.&lt;/li&gt;
      &lt;li&gt;What is crusting? It's when the surface of the steak becomes cow bacon —
it's massively tasty.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Coat the steak with olive oil. Then season.&lt;/li&gt;
  &lt;li&gt;Salt and pepper both sides very heavily. It's almost impossible to put too much
salt. Please stop reading now if you are concerned about salt intake.&lt;/li&gt;
  &lt;li&gt;Push and rub seasoning into the meat.&lt;/li&gt;
  &lt;li&gt;Use a cast-iron, heavy bottom pan. This type of pan radiates heat well.&lt;/li&gt;
  &lt;li&gt;Turn on the flame and wait for the pan to get hot.&lt;/li&gt;
  &lt;li&gt;The pan is hot enough when it begins to smoke. (The patina on
the pan is burning.)&lt;/li&gt;
  &lt;li&gt;Lay the steak in the pan.&lt;/li&gt;
  &lt;li&gt;Press down a bit on the steak at the very start to ensure good contact.&lt;/li&gt;
  &lt;li&gt;Turn every minute, for 8 minutes total. It will get a crusty/caramelized feel.
    &lt;ul&gt;
      &lt;li&gt;EXTRA CREDIT: Just after you flip it, while it is still bubbling, rub it
with &lt;em&gt;garlic&lt;/em&gt;. (Cut the garlic in half, and use the tongs to rub it on the
steak.)&lt;/li&gt;
      &lt;li&gt;EXTRA CREDIT: Just after you flip it, while it is still bubbling, rub it
with &lt;em&gt;butter&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;EXTRA CREDIT: On each turn, mop up the fat with a sprig of rosemary and pat
the fat back onto the steak.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use tongs to turn the steak on its side. You'll want a good crispiness on all sides.&lt;/li&gt;
  &lt;li&gt;Don't grab too hard—you don't want the juices to escape.&lt;/li&gt;
  &lt;li&gt;Poke the steak with your finger. It should be firm.
    &lt;ul&gt;
      &lt;li&gt;Don't cut into it yet— this will release the tasty juices.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Take it off the heat, put it on an unheated grill, and let it rest for 2 minutes.&lt;/li&gt;
  &lt;li&gt;Heat your plates on the burner, on the lowest heat. You don't want cold plates
sapping the heat from your perfectly cooked steak.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WHILE THE STEAK IS RESTING, CHOOSE YOUR ADVENTURE:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dress the board (&lt;a href="https://www.youtube.com/watch?v=3EcF_dKHXHY#t=489"&gt;https://www.youtube.com/watch?v=3EcF_dKHXHY#t=489&lt;/a&gt;):
    &lt;ul&gt;
      &lt;li&gt;Chop &amp;amp; squash a few cloves of garlic with the side of your knife. Mix with
salt and parsley.&lt;/li&gt;
      &lt;li&gt;Add lemon juice and olive oil.&lt;/li&gt;
      &lt;li&gt;When the steak is ready, the board will be dressed, so rub your steak on the board, 'dressing' it.&lt;/li&gt;
      &lt;li&gt;If you want, add more butter. You can never go wrong with more butter.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;Add lemon.&lt;/li&gt;
      &lt;li&gt;Drizzle a bit of good olive oil.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Zero Effort Responsive Email Creation</title>
    <link rel="alternate" href="http://dtrejo.com/zero-effort-responsive-email-creation.html"/>
    <id>http://dtrejo.com//zero-effort-responsive-email-creation.html</id>
    <published>2014-07-19T21:32:00Z</published>
    <updated>2014-07-19T21:32:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;Creating responsive emails can be time consuming. Many email service providers
have terrible email editors. With this process you won't have to understand
email client compatibility issues, &lt;em&gt;and&lt;/em&gt; you won't have to write inline CSS.&lt;/p&gt;



&lt;p&gt;This flow assumes that you 1) do not have heavy design needs, and 2) you have an
existing email system that accepts HTML/text (and you don't want to migrate your
list just to send out your responsive email).&lt;/p&gt;

&lt;p&gt;First, choose an email service provider, like Mailchimp, whose web email editor
sends responsive emails. Then, use Mailchimp's email editor to create your email
and send it to yourself via a “campaign,” not the "test" email button. Mailchimp
will send the email to your inbox. Use Gmail’s "view original," and you'll
find its source: mangled HTML and text. (Side note: emails are sent as both HTML
and text in order to support both sophisticated and unsophisticated email
clients.)&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="614" height="352" src="http://dtrejo.com/images/email-creation1.png?1448761096" /&gt;&lt;/p&gt;

&lt;h2 id="how-to-unmangle-mailchimps-htmltext"&gt;How to unmangle Mailchimp's HTML/text&lt;/h2&gt;

&lt;p&gt;The HTML and text are encoded in a format called "quoted printable." To decode
them into something usable, head over to this great tool by &lt;a href="http://mathiasbynens.be/"&gt;Mattias
Byrnens&lt;/a&gt;, &lt;a href="http://mothereff.in/quoted-printable"&gt;mothereff.in/quoted-printable&lt;/a&gt;. Copy the HTML section out of
the email, and paste it in "Encoded" textarea. Instantly, the decoded version
will appear in the "Decoded" area above it. Do the same for the text version of
the email. Take both versions of the email, put them in your text editor, and
edit them to your heart's content!&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="781" height="196" src="http://dtrejo.com/images/email-creation2.png?1448761097" /&gt;&lt;/p&gt;

&lt;p&gt;To test your edits (and double-check mailchimp’s output), use
&lt;a href="http://PutsMail.com"&gt;PutsMail.com&lt;/a&gt;. Paste the HTML in the Body textarea and test out
various resolutions.&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="494" height="317" src="http://dtrejo.com/images/email-creation3.png?1448761097" /&gt;&lt;/p&gt;

&lt;p&gt;NOTE: uncheck the checkbox that says, "Make the CSS inline
when 'Check your HTML.’" All your CSS is already inline—you don’t want PutsMail
to screw up anything by being too smart.&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="492" height="51" src="http://dtrejo.com/images/email-creation4.png?1448761097" /&gt;&lt;/p&gt;

&lt;p&gt;To triple-check that your email is beautiful, use PutsMail to send yourself test
emails.&lt;/p&gt;

&lt;p&gt;That's it! Enjoy!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>How to Run an Intern Meetup</title>
    <link rel="alternate" href="http://dtrejo.com/how-to-run-an-intern-meetup.html"/>
    <id>http://dtrejo.com//how-to-run-an-intern-meetup.html</id>
    <published>2014-03-21T23:33:00Z</published>
    <updated>2014-03-21T23:33:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Note: written in 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the checklist version. Normally I'd write a story about how to do this,
but that takes more time and also is probably less reproducible.&lt;/p&gt;



&lt;h3 id="goals"&gt;Goals&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;have interns visit&lt;/li&gt;
  &lt;li&gt;have interns talk to your employees&lt;/li&gt;
  &lt;li&gt;have interns think your company is awesome and then apply to work with you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="suck-points"&gt;Suck points&lt;/h3&gt;
&lt;p&gt;Reasons why your event might suck, based on past experiences at meetups I
attended during my three Bay Area Software Engineering internships. Also based
on the two meetups I helped organize in summer 2011 and 2012 (the meetups I
organized didn't have these problems :).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the exec you picked to give a talk isn't great at public speaking, or wasn't
excited enough about the topic&lt;/li&gt;
  &lt;li&gt;the talk went for too long&lt;/li&gt;
  &lt;li&gt;you served pizza&lt;/li&gt;
  &lt;li&gt;you don't serve beer&lt;/li&gt;
  &lt;li&gt;too many people show up to your event. personally I think 40-60 is a good
number.&lt;/li&gt;
  &lt;li&gt;you let non-intern adults into the event&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="how-not-to-suck-and-have-a-good-event"&gt;How not to suck and have a good event&lt;/h3&gt;

&lt;h3 id="venue--physical-stuff"&gt;Venue &amp;amp; Physical stuff&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;name tags with the person's name and the company they work at, so people don't
have to incessantly and annoyingly ask each other where they work.&lt;/li&gt;
  &lt;li&gt;food. Burritos are a decent choice. Tacos are as well. Sushi is super pro, but
expensive ;)&lt;/li&gt;
  &lt;li&gt;have a projector for slides for your speaker&lt;/li&gt;
  &lt;li&gt;use Eventbrite, collect email name, employer, university, and graduation year,
all in different fields. You'll use this to un-invite non-students, and for
recruiting later on.&lt;/li&gt;
  &lt;li&gt;at the event have a little booth sort of thing with a sign up sheet for "yes,
I'd like to work here, please ping me for my resume so we can start talking".&lt;/li&gt;
  &lt;li&gt;swag. stickers, whatever, doesn't need to be expensive or fancy or useless or
hackneyed.&lt;/li&gt;
  &lt;li&gt;chairs for people to sit down. I recommend leaving lots of space between the
rows, as well as a decent amount of space between the chairs so that people
can get through. People will turn their chairs once the talk is finished and
talk to each other, and eat their food with plenty of space to be messy and
put their trash/plate on the ground.&lt;/li&gt;
  &lt;li&gt;have beer. You can ask people if they are 21 when they sign up on Eventbrite,
and then give them little pink stickers on their name tag when they show up
and are over 21. Then you could have someone near the beer enforcing that
people are 21.&lt;/li&gt;
  &lt;li&gt;if you are not on the ground floor of your building, or your doors lock, give
your phone number to attendees by modifying the Eventbrite RSVP email, and
also possibly putting a number on your locked door so people can call you if
they are locked out.&lt;/li&gt;
  &lt;li&gt;have a little table and a couple of friendly people sit there and hang out
name tags and make conversation with people.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="getting-the-word-out"&gt;Getting the word out&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DONT schedule it on the same night as ALL the other intern meetups. At least
in summer 2012, this was Thursday. Try Tuesday or something.&lt;/li&gt;
  &lt;li&gt;DO have one of your interns take point on publicizing the event: this makes it
more personal and ALSO relevant to other interns, because people are like "oh,
this person I've seen around the valley and that is my age, I should listen
and maybe I'll even see them later and we'll become friends. I might actually
end up caring about this person".&lt;/li&gt;
  &lt;li&gt;every year there is an intern group on Facebook. Post to it 2 weeks before the
event, 1 week before the event, and the day before.&lt;/li&gt;
  &lt;li&gt;the intern who takes point (the LEAD) will likely know interns at many other
companies. The LEAD can then ask their friends at each of these companies to
email a blurb out to that company's intern list. Here are some
companies/interns that &lt;a href="https://twitter.com/seanzawi"&gt;Sean&lt;/a&gt; and I emailed out to for this past meetup (emails
may/may not have been sent out, but we asked people there to send out for us):
    &lt;ul&gt;
      &lt;li&gt;mozilla&lt;/li&gt;
      &lt;li&gt;learnboost&lt;/li&gt;
      &lt;li&gt;uber&lt;/li&gt;
      &lt;li&gt;yammer&lt;/li&gt;
      &lt;li&gt;twitter&lt;/li&gt;
      &lt;li&gt;zynga&lt;/li&gt;
      &lt;li&gt;mixpanel&lt;/li&gt;
      &lt;li&gt;stripe&lt;/li&gt;
      &lt;li&gt;codeforamerica&lt;/li&gt;
      &lt;li&gt;yahoo (really? Okay!)&lt;/li&gt;
      &lt;li&gt;google&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;shoot an email to the folks at internmatch who have a ~500 person list of
interns in the bay (as of 2012).&lt;/li&gt;
  &lt;li&gt;big companies will send more interns, so sending off to big companies is a
bigger priority.&lt;/li&gt;
  &lt;li&gt;don't forget to have each of your interns send out to their university friends
(and acquaintances) who are in the area. Tell them not to be ashamed about
emailing, but DO give them a blurb, otherwise each one will have to spend time
writing an invitation.&lt;/li&gt;
  &lt;li&gt;of the people who RSVP on eventbrite, about 50% will show up. No, you and your
event are not special, it will be 50%. This should guide how much food you
buy.&lt;/li&gt;
  &lt;li&gt;it doesn't matter if emails are sent out via personal email or work email. In
fact, personal email with the work email cc'd is almost more human &amp;amp; friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="making-the-most-of-the-event-for-the-sake-of-your-company"&gt;Making the most of the event, for the sake of your company&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DO invite your full-time engineers. You should also feed them.&lt;/li&gt;
  &lt;li&gt;DO have your exec talk on a topic that would be interesting to both your
full-timers and your interns. If your CTO is a good speaker, I recommend
having them give a tech talk. It is OK to get technical, people will raise
their hands. The worst thing is to have the talk go on too long, I recommend
limiting them to 15-20 minutes of speaking and then open it up to another 10
minutes of questions.&lt;/li&gt;
  &lt;li&gt;ONCE THE TALK IS OVER, the LEAD should say thanks for talking, and
then CALL OUT EMPLOYEES e.g. this is Shahrooz, talk to him about
Android; this is Danny talk to him about node.js; this is &lt;a href="https://medium.com/tech-talk/d823af31f7c"&gt;Chris&lt;/a&gt;, talk to him
about iOS; this is Mike &amp;amp; &lt;a href="http://daveeddy.com/"&gt;Dave&lt;/a&gt;, talk to them about Riak and DTrace and
keeping machines from not blowing up in a cloud of rainbow smoke. This allows
interns to go and talk to the people who interest them, and gives them a
handle on your organization so they can get more out of the meetup by asking
questions of those specific people.&lt;/li&gt;
  &lt;li&gt;your employees and interns should be wearing some sort of company swag.&lt;/li&gt;
  &lt;li&gt;REMIND your employees to bring their business cards and hand them out like
cray cray. They do have cards, right?&lt;/li&gt;
  &lt;li&gt;After the event, have the LEAD send an email out to everyone who RSVP'd on the
eventbrite, thanking them for coming, and encouraging them to email back if
they are interested in working at your company. Cc your hiring person on this
email to make hand-off easier.&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>My Javascript Tooling Wishlist</title>
    <link rel="alternate" href="http://dtrejo.com/my-javascript-tooling-wishlist.html"/>
    <id>http://dtrejo.com//my-javascript-tooling-wishlist.html</id>
    <published>2014-03-21T06:06:00Z</published>
    <updated>2014-03-21T06:06:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img height="120px" style="float:right; padding: 0 0 3.2rem 3.2rem;" src="http://dtrejo.com/images/js-logo.png?1448761097" /&gt;&lt;/p&gt;

&lt;p&gt;What follows is a wishlist of features I'd want in my perfect javascript
dev environment (I don't care whether each of these things is a separate command
line tool, I just want them :)&lt;/p&gt;



&lt;p&gt;Some of these are easy to write, some are hard. What would you add to this list?&lt;/p&gt;

&lt;h2 id="i-dream-of-a-javascript-with-these-tools"&gt;I dream of a javascript with these tools…&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;flow-typing e.g. &lt;a href="https://github.com/brownplt/strobe"&gt;strobe&lt;/a&gt;, &lt;a href="http://cs.brown.edu/~sk/Publications/Papers/Published/gsk-flow-typing-theory/paper.pdf"&gt;strobe paper&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;a flow typer is a program that reads your javascript, notices the
operators you use on certain variables (e.g. &lt;code&gt;a + 1&lt;/code&gt;), and then guesses
the type of those variables.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;types via the flow-typer would make the following possible…
    &lt;ul&gt;
      &lt;li&gt;editor shows types for every variable, and you didn't have to specify them
:)&lt;/li&gt;
      &lt;li&gt;auto-generated API documentation, with types&lt;/li&gt;
      &lt;li&gt;a "lock-API" tool; when you run it, your the type signatures of your
functions are remembered. If the signatures every change, it warns you.
This "lock-API" tool will prevent you from forgetting to increment the
version of your package.json when you break the API.&lt;/li&gt;
      &lt;li&gt;test fuzzer based on the inferred types, to easily up your code coverage&lt;/li&gt;
      &lt;li&gt;some kind of fuzzer pattern language that would allow you to automatically
generate assertions to be used at the start of every function. assertions
would be removed before running in production. This would help people
using your code to find mistakes more quickly. (This one is going off into
la la land. Not sure if I believe this would be useful enough).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;visualization of your project's require dependency graph e.g. &lt;a href="https://trace.gl/"&gt;tracegl&lt;/a&gt;?, &lt;a href="http://www.yasiv.com/npm#view/browserify"&gt;yasiv npm visualization&lt;/a&gt; via &lt;a href="https://www.youtube.com/watch?v=DCQNm6yiZh0"&gt;substack's lxjs '13 talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;visualization of which functions call other functions, along with a bird's eye
view of your whole program&lt;/li&gt;
  &lt;li&gt;static analysis tool to find uncalled callbacks (&lt;code&gt;callback&lt;/code&gt; &lt;code&gt;cb&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;done&lt;/code&gt;, etc) e.g. &lt;a href="http://npm.im/jshint"&gt;jshint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;static analysis tool to find dead code after &lt;code&gt;return&lt;/code&gt;. e.g. &lt;a href="http://npm.im/jshint"&gt;jshint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;static analysis tool that reminds you to do &lt;code&gt;return cb()&lt;/code&gt;, so you never call
callbacks twice.&lt;/li&gt;
  &lt;li&gt;auto npm install
    &lt;ul&gt;
      &lt;li&gt;when you add a call to &lt;code&gt;require('example')&lt;/code&gt;, &lt;code&gt;example&lt;/code&gt; is detected as not
installed, and the tool runs &lt;code&gt;npm install --save example&lt;/code&gt; so you don't
have to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;style guide enforcement &lt;strong&gt;and correction&lt;/strong&gt; tool that bases itself on certain
"blessed" files. Based on the formatting and style of the blessed files, it
corrects newly written files to match the same whitespace, line-length, etc.
No blasphemers allowed! e.g. &lt;a href="https://github.com/jshint/fixmyjs"&gt;fixymyjs (kinda)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;v8 hidden class detector - if a hidden class is "broken" or deoptimized, it
warns you. e.g. if you use &lt;code&gt;delete&lt;/code&gt; on a property of your &lt;code&gt;new Point()&lt;/code&gt;
object.&lt;/li&gt;
  &lt;li&gt;lodash style native vs custom speed improvement detector
    &lt;ul&gt;
      &lt;li&gt;many functions are slower when implemented using native calls e.g. &lt;code&gt;[].slice&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides"&gt;John David Dalton's jsconf '12 presentation on which custom implementations are faster&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;this tool would tell you when to use custom, and when to use native.&lt;/li&gt;
      &lt;li&gt;it would also tell you when to switch from custom back to native (v8 gets
faster, etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;memory usage map overlaid on your code as a heat map
    &lt;ul&gt;
      &lt;li&gt;visually see where memory is being used in your code.&lt;/li&gt;
      &lt;li&gt;see which lines are responsible for how much memory usage&lt;/li&gt;
      &lt;li&gt;a snapshot after a day's run should theoretically show you where your
leaks are, because those lines are the hottest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(new Error).stack&lt;/code&gt; printer that highlights lines based on your app's code,
&lt;code&gt;node_modules&lt;/code&gt; code, and node core code.&lt;/li&gt;
  &lt;li&gt;performance test runner that takes a list of git commits, checks out each one,
runs benchmarks and records results, then continues on. spits out a report at
the end. maybe with a pretty graph showing which commits did best on which
parts of the benchmark.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="general-node-style-project-tools"&gt;general node-style project tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;bulk git repo updating (if your project is modular, and each part is in a
different repo)&lt;/li&gt;
  &lt;li&gt;bulk npm version updating (if you are substack, and want to manage the many
npm modules you've written)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="already-implemented-and-thus-less-interesting"&gt;already-implemented and thus less interesting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;jump to declaration e.g. &lt;a href="https://www.jetbrains.com/webstorm/"&gt;webstorm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jump to all usages of a function&lt;/li&gt;
  &lt;li&gt;auto test or auto rerun server on change e.g. &lt;a href="http://npm.im/run"&gt;run&lt;/a&gt;, &lt;a href="http://npm.im/nodemon"&gt;nodemon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;shell enhancement: click on a filename to open in your editor&lt;/li&gt;
  &lt;li&gt;code coverage e.g. &lt;a href="https://github.com/substack/coverify"&gt;coverify for client side js&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;highlight untested code in a really ugly color in your editor
e.g. &lt;a href="http://racket-lang.org/"&gt;DrScheme&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;review and &lt;strong&gt;edit&lt;/strong&gt; diffs side-by-side before pushing to master (or while fixing
conflicts)
    &lt;ul&gt;
      &lt;li&gt;use &lt;a href="https://github.com/philz/git-vimdiff"&gt;Philip Zeyliger's git-vimdiff&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="ideas--suggestions--i-built-that"&gt;Ideas / suggestions / "I built that!"&lt;/h4&gt;
&lt;p&gt;Please if you know of any things that I should add to the lists above, tweet
at me: &lt;a href="http://twitter.com/ddtrejo"&gt;@ddtrejo&lt;/a&gt;, alternatively, &lt;a href="https://github.com/dtrejo"&gt;my email is on my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;David Trejo&lt;/p&gt;

&lt;p&gt;Projects I mentioned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/brownplt/strobe"&gt;https://github.com/brownplt/strobe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.jetbrains.com/webstorm/"&gt;https://www.jetbrains.com/webstorm/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://npm.im/run"&gt;http://npm.im/run&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://npm.im/nodemon"&gt;http://npm.im/nodemon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://trace.gl/"&gt;https://trace.gl/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.yasiv.com/npm#view/browserify"&gt;http://www.yasiv.com/npm#view/browserify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://npm.im/jshint"&gt;http://npm.im/jshint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides"&gt;http://allyoucanleet.com/post/21624742336/jsconf-us-12-slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://racket-lang.org/"&gt;http://racket-lang.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DCQNm6yiZh0"&gt;https://www.youtube.com/watch?v=DCQNm6yiZh0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/philz/git-vimdiff"&gt;https://github.com/philz/git-vimdiff&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/substack/coverify"&gt;https://github.com/substack/coverify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://cs.brown.edu/~sk/Publications/Papers/Published/gsk-flow-typing-theory/paper.pdf"&gt;http://cs.brown.edu/~sk/Publications/Papers/Published/gsk-flow-typing-theory/paper.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/jshint/fixmyjs"&gt;https://github.com/jshint/fixmyjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
