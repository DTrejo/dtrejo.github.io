<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David Trejo | Developer and Consultant</title>
  <subtitle>DTrejo's Developer Tips</subtitle>
  <id>https://dtrejo.com/</id>
  <link href="https://dtrejo.com/"/>
  <link href="https://dtrejo.com/feed.xml" rel="self"/>
  <updated>2017-05-18T02:40:00Z</updated>
  <author>
    <name>DTrejo</name>
  </author>
  <entry>
    <title>Moneyball Book Review and Measuring Revenue per Engineer</title>
    <link rel="alternate" href="https://dtrejo.com/moneyball-book-review-and-measuring-revenue-per-engineer.html"/>
    <id>https://dtrejo.com//moneyball-book-review-and-measuring-revenue-per-engineer.html</id>
    <published>2017-05-18T02:40:00Z</published>
    <updated>2017-05-18T02:40:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;First, I wrote a book review of Moneyball, which talks about how the Oakland A's
baseball team buys players who are undervalued by the rest of the league.&lt;/p&gt;

&lt;p&gt;Second, we'll look at ways to measure revenue per engineer, and related numbers we'd want to know. Are you an engineering leaders with 20+ people in your organization? You'll like this section because you're always trying to give headcount to the teams who'll most favorably improve revenue. You're also trying to hire engineers who care about your business.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reading time: 11 minutes, 2 seconds–but don't let that scare you away.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="moneyball-book-review"&gt;1. Moneyball Book Review&lt;/h2&gt;
&lt;p&gt;My style of book review is to pull out the best sections, so here they are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] baseball, more than other sports, gave you meaningful things to count, and that by counting them you could determine the value of the people who played the game
&lt;br /&gt;– page 69&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the thirty-fifth pick approaches, Erik once again leans into the speaker phone. If he leaned in just a bit more closely he might hear phones around the league cliciking off, so that people could laugh without being heard. For they do laugh. They will make fun of what the A's are about to do, and there will be a lesson in that. The inability to envision a certain kind of person doing a certain kind of thing because you've never seen someone who looks like him do it before is not just a vice. It's a luxury. What begins as a failure of imagination ends as a market inefficiency: when you rule out an entire class of people from doing a job simply by their appearance, you are less likely to find the best person for the job.
&lt;br /&gt;– page 115&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A set of Platonic ideas is one of the gifts the Wall Street traders gave to Paul DePodesta. The precision of the AVM system, copied by Paul, enabled him to think about every event that ocurred on a basedball field in a new and more satisfying way. Any ball hit anyplace on a baseball field had been hit just that way thousands of times before: the average of all those hits was the Platonic idea. Call it a line drive hit at &lt;em&gt;x&lt;/em&gt; trajectory and &lt;em&gt;y&lt;/em&gt; sp speed to point #968. From the ten years worth of data you ca see that there have been 8,642 practically identical hits. You can see that 92 percent of the time the hit went for a double, 4 percent for a single, and 4 percent it was caught. Suppose the average value of that event is .50 of a run. &lt;em&gt;No matter what actually happened,&lt;/em&gt; the system credits the hitter with having generated .50 of a run, and the pitcher with having given up .50 of a run. If Johnny Damon happens to get one of his trademark jumps and makes a sprawling catch, he is credited with saving his team .50 of a run.&lt;/p&gt;

  &lt;p&gt;The beauty of the value of a hit (or catch) was that the game gave it to you, the game &lt;em&gt;told&lt;/em&gt; you how valuable every event was, by telling you how valuable it had been, on average, over the past ten years. By listening to what the game told him about the value of events, Paul could take every ball hit in the area broadly defined as center field and determine its "expected run value".
&lt;br /&gt;– page 135&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Author notices that the A's in the video room watch the game in a completely different manner. They reply:
&amp;gt; "It's looking at process rather than outcomes," Paul says. "Too many people make decisions based on outcomes rather than process."
&amp;gt; 
&amp;gt; The route a pitch takes to the cather's mitt &lt;em&gt;is&lt;/em&gt; an outcome, I say. It's just a more subtle outcome.
&amp;gt; 
&amp;gt; "It's not what happened," says Paul, "it's how our guy approached it."
&lt;br /&gt;– page 146&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[]…] meant little to the Oakland A's, who were forever looking for dirt-cheap opportunities to accept bad defense for an ability to get on base. One trick of theirs was to pound on a player just after he'd had what appeared to be a career-threatening injury. Billy Beane had a favorite saying, which he'd borrowed from the Wall Street investor Warren Buffet: the hardest thing to find is a good investment. 
&lt;br /&gt;– page 161&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I can already think of a few life events that devalue engineers for most employers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The reason the Oakland A's, as run by Billy Beane, played as if they were a different team in the second half of a season is that they &lt;em&gt;were&lt;/em&gt; a different team. As spring turned to summer the market allowed Billy to do things that he could do at no other time of the year. The bad teams lost hope. With the loss of hope came a desire to cut costs. With the desire to cut costs came the dumping of players. As the supply of players rose, their prices fell. By midsummer, Billy Beane was able to acquire players he could never have afforded at the start of the season.
&lt;br /&gt;– page 193-194&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make me think that every engineering leader should have very friendly relationships with both their reports and their peers at other companies. When an engineer is ready to leave, and isn't interested moving internally, why let them quit when you might be able to call a friend and trade them for someone else, leaving everyone happier?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;His reduced circumstances had forced Billy Beane to embrace a different mental model of the BIg League Pitcher. In Billy Beane's mind, pitchers were nothing like high-performance sports cars, or thoroughbred racehorses, or any other metaphor that implied a cool, inbuilt superiority. They were more like writers. LIke writers, pitchers pitchers initiated action, and set the tone for their games. THey had all sorts of ways of achieving their effects and they needed to be judged by those effects, rather than by their outward appearance, or their technique. To place a premium on velocity for its own sake was like placing a premium on big vocabulary for its own sake. […] Good pitchers were pithcers who got outs; how they did it was beside the point.&lt;/p&gt;

  &lt;p&gt;Good pitchers were like writers in another way too: their output was harder than it should have been to predict.
&lt;br /&gt;– page 222&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] Jackie Robinson was exactly the sort of player the A's and the Jays salivate over. He had stats they tended to stress–high on-base, plate discipline, great power for a second baseman, etc.–&lt;em&gt;plus he was undervalued.&lt;/em&gt; Indeed, one way of looking at the revolution in baseball management is a search for less dramatic version fo Jackie Robinsonºplayers who, for one unfair reason or another, often because of their appearance, had been maligned and undervalued by the market.
&lt;br /&gt;– page 297&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id="measuring-revenue-per-engineer-applying-moneyball-to-engineers"&gt;2. Measuring Revenue per Engineer: Applying Moneyball to Engineers&lt;/h2&gt;

&lt;p&gt;We want to track the engineering equivalent of expected runs, not fastball speed or whether they have a good body.&lt;/p&gt;

&lt;h2 id="what-are-the-engineer-equivalents-of-moneyballs-baseball-stats"&gt;What are the engineer equivalents of Moneyball's baseball stats?&lt;/h2&gt;

&lt;p&gt;Raw engineering skill does not necessarily correlate with revenue.&lt;/p&gt;

&lt;p&gt;Many still try (and fail) to gauge engineering skill using whiteboard interviews. &lt;/p&gt;

&lt;p&gt;Another set of companies test engineering skill with live coding, pair programming, homework projects, and coding challenges.&lt;/p&gt;

&lt;p&gt;I've yet to hear of someone who has explicitly said they hire based on the candidate's future value to their company.&lt;/p&gt;

&lt;p&gt;How do we measure engineering &lt;strong&gt;value&lt;/strong&gt; (not skill) for various roles?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Frontend&lt;/li&gt;
  &lt;li&gt;Backend&lt;/li&gt;
  &lt;li&gt;Systems&lt;/li&gt;
  &lt;li&gt;Growth&lt;/li&gt;
  &lt;li&gt;Native&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="what-do-we-wish-we-knew"&gt;What do we wish we knew?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cost per line of code (bugs + churn + initial-time-cost-to-write). NASA measured this, they paid $1,000 per LOC related to the &lt;em&gt;Challenger&lt;/em&gt; accident.*&lt;/li&gt;
  &lt;li&gt;Revenue generated per line of code&lt;/li&gt;
  &lt;li&gt;Revenue generated over time&lt;/li&gt;
  &lt;li&gt;Time to ship (from e.g. design phase until production)&lt;/li&gt;
  &lt;li&gt;Amount of time code spends in inventory before sale (code in branches awaiting deployment count as inventory; production counts as sale)&lt;/li&gt;
  &lt;li&gt;Server costs saved (number of servers + cost for servers + number of pager alerts + revenue per server-dollar)&lt;/li&gt;
  &lt;li&gt;Client-side device costs saved (latency + CPU + energy + data + value of customer's time)&lt;/li&gt;
  &lt;li&gt;Customer value created (usually we use revenue as a proxy for customer value)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="secondary-metrics-that-correlate-in-well-known-ways-with-the-above"&gt;Secondary metrics that correlate in well-known ways with the above:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Page speed increases&lt;/li&gt;
  &lt;li&gt;Test suite speed increases&lt;/li&gt;
  &lt;li&gt;Team efficiency increases&lt;/li&gt;
  &lt;li&gt;Lines of code deleted&lt;/li&gt;
  &lt;li&gt;Number of deploys per week&lt;/li&gt;
  &lt;li&gt;Amount of downtime&lt;/li&gt;
  &lt;li&gt;Improved new engineer onboarding speed&lt;/li&gt;
  &lt;li&gt;Bugs fixed&lt;/li&gt;
  &lt;li&gt;Bugs fixed &lt;em&gt;before anyone else knew they existed.&lt;/em&gt; Communicating and getting credit for these is a very difficult problem for some of my friends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You and your company have certain things you value. If you're not sure what you
value, survey your current
team's resumes and past performance reviews for what stats got them noticed. You
can turn these into questions to ask before a phone screen or instead of a
resume. Personally I don't believe in resumes, because as engineers we usually aren't good at
reducing our value down to bullet points.&lt;/p&gt;

&lt;h2 id="measuring-the-value-of-your-teams"&gt;Measuring the Value of Your Teams&lt;/h2&gt;

&lt;p&gt;You can work numbers for the metrics above from the front or from the back.&lt;/p&gt;

&lt;p&gt;Working the numbers from the back means looking at…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Profit and loss for company → P &amp;amp; L for team → team size → single team-member → fraction of impact&lt;/li&gt;
  &lt;li&gt;Team shape, e.g. who worked on a particular feature: number engineers of each type, number of designers, number of PMs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you can't quantify the value of a single engineer, you can still
understand the value of a department or a team. Then you can use the amount you pay
each person to &lt;em&gt;estimate&lt;/em&gt; the fraction of value they bring. The amount you pay a
person doesn't always correlate with how much value they bring, but
it's a start.&lt;/p&gt;

&lt;p&gt;Working the numbers forward means you evaluate existing teammates based on any stat that the person had the presence of mind to track and share, then convert it to a dollar amount.&lt;/p&gt;

&lt;p&gt;As for discovering new and promising engineers, you might look at…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby gems stats&lt;/li&gt;
  &lt;li&gt;Github repo stats&lt;/li&gt;
  &lt;li&gt;npm module stats&lt;/li&gt;
  &lt;li&gt;Bullet points on their resume, adjusted to fit your company's situation and reduced to dollar figures. For example, a 20% reduction in server fleet size, applied to your 2000 servers which cost you $Y per year, means if you hire this devops person and they do the same optimization, you stand to save… $Y-(Y*.2) annually.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, we want a technique that works well on people without public
work. Thus a questionnaire would work well, assuming they can give us stats or at
least rough numbers. For people without past industry experience, the best we can do is measure engineering skill and potential in an unbiased way.&lt;/p&gt;

&lt;h3 id="what-increases-the-value-of-an-engineer"&gt;What increases the value of an engineer?&lt;/h3&gt;

&lt;p&gt;Someone who has the same stats, but is from a historically underpaid group in
tech, or who has work experience that no one else knows how to assess or value. This is why Matasano has such success with their CTFs*.&lt;/p&gt;

&lt;h3 id="what-are-other-people-measuring"&gt;What are other people measuring?&lt;/h3&gt;

&lt;p&gt;Some teams measure as part of how they lead/manage:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want everyone on my team to be able to go home confident they’ve done their job well, and not worry if I’ve just had a bad day. […] 
Our team pays attention to:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Commit frequency: we encourage everyone to check in multiple times daily&lt;/li&gt;
    &lt;li&gt;Commit size: keeping work surface area small to lower risk&lt;/li&gt;
    &lt;li&gt;Code churn: in retrospectives and to notice when someone is stuck&lt;/li&gt;
    &lt;li&gt;Legacy refactoring: to notice when people are cleaning up the codebase&lt;/li&gt;
    &lt;li&gt;Helping others: to recognize team players&lt;/li&gt;
    &lt;li&gt;Review Speed: because it can be tied directly to business value delivered&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;– Andrew Templeton, Engineering Director (&lt;a href="https://twitter.com/ayetempleton"&gt;@ayetempleton&lt;/a&gt;)*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="choosing-what-to-measure"&gt;Choosing what to measure&lt;/h2&gt;

&lt;p&gt;You &lt;strong&gt;don't&lt;/strong&gt; want to measure business outcomes on a day-to-day basis, because
that is demotivating. You want to measure activities that you know lead to good
business outcomes. For example, you wouldn't only give people credit for
successful A/B tests, instead you'd know that 1 in 6 A/B tests were successful last year,
and encourage people to run more (within reason).&lt;/p&gt;

&lt;p&gt;What do you wish you could measure? How are your measurements coming along?&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David&lt;br /&gt;
david åt dtrejo.com&lt;/p&gt;

&lt;h3 id="ps-why-are-some-engineers-undervalued"&gt;P.S. Why are some engineers undervalued?&lt;/h3&gt;

&lt;p&gt;Are you running a business or an acquisition target? If you're running a business, you don't care whether your team looks like a typical startup.&lt;/p&gt;

&lt;p&gt;Jackie Robinson was the first black baseball player. Hiring your first Jackie Robinson engineer is an amazing investment because everyone else is filling their teams with Ivy League+ educated white men (whether by accident or by intent).&lt;/p&gt;

&lt;p&gt;It's well known that investors let their bias influence their decisions quite often, which has a big effect on the kinds of leaders we see at funded startups. When companies rely heavily on referral hiring (because it's so much easier), it can lead to more homogeneity.&lt;/p&gt;

&lt;p&gt;I believe that engineers from under-represented groups in tech have the best value with the highest ratio of engineering prowess to dollar spent. Black women are probably at the top of the pyramid if you were going compare them.&lt;/p&gt;

&lt;p&gt;Am I a racist? No, I'm pointing out that everyone else is a racist, and this is why you should hire black/latinx/women engineers.&lt;/p&gt;

&lt;h3 id="who-else-do-i-think-is-undervalued"&gt;Who else do I think is undervalued?&lt;/h3&gt;

&lt;p&gt;Anyone overly enterprisey. Anyone who isn't young (whiteboarding favors the young). Easiest example? Middle-aged indian Java engineers. Might as well throw in anyone who primarily works with a Microsoft stack as well.&lt;/p&gt;

&lt;h4 id="footnotes"&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;* &lt;a href="https://history.nasa.gov/sts1/pages/computer.html"&gt;NASA's cost per LOC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;* &lt;a href="https://sockpuppet.org/blog/2015/07/13/starfighter/"&gt;Erin on Matasano's CTFs&lt;/a&gt;; &lt;a href="https://sockpuppet.org/blog/2015/03/06/the-hiring-post/"&gt;Thomas' article on hiring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;* &lt;a href="https://blog.gitprime.com/why-kpis-matter-for-software-engineering-andrew-templeton"&gt;Andrew Templeton on what KPIs he tracks in an interview with GitPrime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Related articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://danluu.com/programmer-moneyball/"&gt;Dan Luu on programmer moneyball&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://danluu.com/hiring-lemons/"&gt;Dan Luu on information asymmetry in hiring (who is great?)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Questions That Senior Systems Engineers Want Answered</title>
    <link rel="alternate" href="https://dtrejo.com/questions-that-senior-systems-engineers-want-answered.html"/>
    <id>https://dtrejo.com//questions-that-senior-systems-engineers-want-answered.html</id>
    <published>2017-05-16T21:32:00Z</published>
    <updated>2017-05-16T21:32:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;You know that interviewing is a painful and expensive problem when your friends
send you pages worth of questions that they use to evaluate future employers.&lt;/p&gt;

&lt;p&gt;These questions come from an experienced senior systems engineer friend of mine.
They gave me permission to publish, but asked to remain anonymous. This person
is currently interviewing.&lt;/p&gt;

&lt;p&gt;If you're not looking to hire systems engineers, this article is less relevant
to you, but I think you'll still find it valuable.&lt;/p&gt;

&lt;p&gt;– David&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Anonymous writes…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Things I want to know about a prospective employer. At the conclusion of this list, I will attempt to define questions that will elicit the answers to these questions. Note that the questions actually asked may not necessarily correspond to the questions that one wants to ask.&lt;/p&gt;

&lt;h2 id="what-i-really-want-to-know"&gt;What I Really Want to Know&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Project prioritization
    &lt;ul&gt;
      &lt;li&gt;What metrics are used to guide prioritization efforts?&lt;/li&gt;
      &lt;li&gt;What do project proposals look like? Are engineers forced to clearly define the problem or do they just propose various things they want to do?&lt;/li&gt;
      &lt;li&gt;Does someone maintain a backlog of potential projects and reassess things periodically?&lt;/li&gt;
      &lt;li&gt;Is there a centralized individual who selects what goes into a release from the top down, or are individual teams empowered to do their own prioritization?&lt;/li&gt;
      &lt;li&gt;How are projects staffed? In particular, how are projects that nobody &lt;em&gt;wants&lt;/em&gt; to do staffed? It’s easy to find people to work on projects that will have high visibility or a technically rewarding environment, but the real test of culture is how gaps are identified and staffed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Software development lifecycle process
    &lt;ul&gt;
      &lt;li&gt;What’s the code review process like?&lt;/li&gt;
      &lt;li&gt;How strictly are requirements enforced when it comes to getting reviews and performing automated testing?&lt;/li&gt;
      &lt;li&gt;Do developers write both code and tests, or is there an organizational split between development and QA?&lt;/li&gt;
      &lt;li&gt;How are conflicts mediated, both on the design level and the implementation level?&lt;/li&gt;
      &lt;li&gt;What’s the average time required to fix an “average sized” bug, from receiving the bug to closing it? Large times would reveal inefficiencies in the software development lifecycle. Over 8 hours saps motivation. Under 4 hours is a huge dopamine rush for highly productive developers. :)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Approach to quality &amp;amp; technical debt
    &lt;ul&gt;
      &lt;li&gt;Are people who introduce technical debt held accountable for removing it?&lt;/li&gt;
      &lt;li&gt;Is technical debt tracked at all?&lt;/li&gt;
      &lt;li&gt;When was the last time someone was promoted for their work on technical debt and other “hard to quantify” things (like developer productivity, internal infrastructure, build and test frameworks, etc.)&lt;/li&gt;
      &lt;li&gt;Are corporate and cultural incentives set up for adding or removing technical debt?&lt;/li&gt;
      &lt;li&gt;What is the ratio of short-term fixes to long-term fixes (and why)?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Remote work and WFH policy&lt;/li&gt;
  &lt;li&gt;How do you grow engineers? How important is mentorship to company culture?&lt;/li&gt;
  &lt;li&gt;How do you give constructive feedback…
    &lt;ul&gt;
      &lt;li&gt;…to managers?&lt;/li&gt;
      &lt;li&gt;…to other engineers?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Are you hiring too fast or too slow?&lt;/li&gt;
  &lt;li&gt;What is your policy towards brilliant jerks?&lt;/li&gt;
  &lt;li&gt;What is your policy towards open source?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="be-careful"&gt;Be careful:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t come across as lazy when asking about WFH policies&lt;/li&gt;
  &lt;li&gt;Avoid using the phrase “technical debt” directly, as you don’t want to come across as an engineer who won’t provide high business value&lt;/li&gt;
  &lt;li&gt;Avoid the phrase “unfortunately”, as you want to come across as someone who builds things up rather than puts things down&lt;/li&gt;
  &lt;li&gt;Ask innocent, friendly, and natural questions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="safer-phrasings-that-get-at-the-same-answers"&gt;Safer Phrasings That Get at the Same Answers&lt;/h2&gt;

&lt;p&gt;The following practical questions might provide insights into the above theoretical questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Re: build and continuous integration system, test frameworks, and technical debt:
    &lt;ul&gt;
      &lt;li&gt;When was the last time someone made a meaningful contribution to software development lifecycle and developer productivity tooling? Tell me how they went about it (both organizationally and technically).&lt;/li&gt;
      &lt;li&gt;Do developers push code and tests at the same time (to the same repository), or is there a separate QA organization that writes tests asynchronously from features being pushed?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Show me a “non trivial” code review (use this to asses quality standards, the review process, the no asshole rule, and testing requirements):
    &lt;ul&gt;
      &lt;li&gt;Ask how things are handled when you ask someone to make a change and they don’t want to do it. Is the default policy to “file a bug” and do it later? Do those bugs just get closed out in two months, or is action ever taken? When the problematic code ends up causing production issues, does the issue come back to the person who wrote it?&lt;/li&gt;
      &lt;li&gt;How do you resolve arguments about code style? Do engineers waste colossal amounts of time arguing about style in reviews, or are there automated style checks and formatting tools that allow the discussion to shift toward matters of substance?&lt;/li&gt;
      &lt;li&gt;Note: you can’t ask a new hire this question, you need to ask a long-time employee who has been around the block and seen how things play out&lt;/li&gt;
      &lt;li&gt;Did the developer have to re-run tests due to flakiness? Is there a dashboard showing the state of the build? Are flaky tests tracked? Are there metrics regarding how often tests flake so that the most flaky areas can be addressed?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What are the attributes that get people promoted?
    &lt;ul&gt;
      &lt;li&gt;Be specific: Ask when the last time a close colleague was promoted and what they did to earn the promotion.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Whose responsibility, if any, is developer productivity?
    &lt;ul&gt;
      &lt;li&gt;“Everyone’s responsibility” is the worst possible answer to this question, as it means “nobody’s responsibility”&lt;/li&gt;
      &lt;li&gt;If answers are vague, follow up with: “What was the last thing you did personally?”
        &lt;ul&gt;
          &lt;li&gt;Risk: This might embarrass the person if they did nothing.&lt;/li&gt;
          &lt;li&gt;This is a bit hardball, only go this far if you must.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How does the culture change near the end of the release?
    &lt;ul&gt;
      &lt;li&gt;Does all hell break loose and people just push low quality code to get things out the door?&lt;/li&gt;
      &lt;li&gt;If so, how is the remaining work to “do it right” tracked?&lt;/li&gt;
      &lt;li&gt;What is the power relationship between engineers and managers? Do managers strongly imply you need to work late nights and long hours to ship a release?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How do engineers interact with customers?
    &lt;ul&gt;
      &lt;li&gt;A bit of a fluff question, but can reveal a fair amount about how the company works. Can engineers own a problem from customer interaction to solution, or are they just cogs in the wheel of a giant organization of salespeople and product managers?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How much time have mentors spent with interns and/or new hires this year?
    &lt;ul&gt;
      &lt;li&gt;Goal should be to find a company where mentorship is valued. Mentors shouldn’t blink at the idea of dropping whatever they’re doing for 2 hours to help a mentee (assuming the mentee is worth their time investment).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What is the weirdest bug that you’ve worked on recently?
    &lt;ul&gt;
      &lt;li&gt;Goal is to see how the organization responds to failure&lt;/li&gt;
      &lt;li&gt;How did you fix it in the short-term?&lt;/li&gt;
      &lt;li&gt;How did you fix it in the long-term?
        &lt;ul&gt;
          &lt;li&gt;This is the most interesting part&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;You ideally want to be at a company with good war stories, because then people are excited to do their job&lt;/li&gt;
      &lt;li&gt;Do people actually debug things, or just work around them and restart it?&lt;/li&gt;
      &lt;li&gt;Does the company have a culture of root causing issues on first failure, or do they just throw their hands in the air if they can’t reproduce the issue?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;– Anonymous&lt;br /&gt;
Senior systems engineer in the SF bay area&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;David here. You may see the pattern: more senior people, even those who are
extremely technical, want high autonomy work, and want to be involved in
business decisions. They want to avoid teams and managers where they're just
another pair of hands, where no one tracks the impact of engineering work. They
want their engineering leaders to perceive the kinds of rot and dysfunction that
are difficult to explain to non-technical decision-makers.&lt;/p&gt;

&lt;p&gt;You'll also notice that even someone who is more senior is cautious about asking
hard questions. Interestingly, I ask similar questions in my interviews for full
stack growth engineering positions, although they lean towards growth.&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David&lt;br /&gt;
david ått dtrejo.com&lt;/p&gt;

&lt;p&gt;PS Want to impress all your engineering candidates with how great you and your company are? Email me, I can help.&lt;/p&gt;

&lt;p&gt;PPS Tomorrow I'll be writing and sending my book review of Moneyball–you're going to like it because you'll get a better feel for how to measure &amp;amp; value engineering work.&lt;/p&gt;

&lt;p&gt;In the mean time, I made this tool for you: &lt;a href="http://engineerworth.com/"&gt;EngineerWorth.com&lt;/a&gt;–it helps you calculate whether an engineering feature will pay back the time investment. You can drag the numbers to adjust them to your situation.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tools for Hiring Engineers That Save Time and Increase Conversion</title>
    <link rel="alternate" href="https://dtrejo.com/tools-for-hiring-engineers.html"/>
    <id>https://dtrejo.com//tools-for-hiring-engineers.html</id>
    <published>2017-05-15T17:40:00Z</published>
    <updated>2017-05-15T17:40:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;Eric Zhang (CTO at Scalable Press) requested that I write him this article (thanks for the request Eric!).&lt;/p&gt;

&lt;p&gt;The tools in this article will help you drop fewer referral candidates and normal candidates; get more applicants for positions for which aren't "open" yet; avoid scheduling hell; and increase your ratio of referrals hires to 40%+ (this is desirable because they are easier to hire).&lt;/p&gt;

&lt;h2 id="open-prospects-and-referral-candidates-who-arent-ready-to-apply"&gt;Open Prospects and Referral Candidates Who Aren't Ready to Apply&lt;/h2&gt;
&lt;p&gt;An open prospect is someone who has yet to be qualified or disqualified. There are a few kinds of people who are big fans of you and your company, but you probably don't talk to them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Referrals who aren't ready to apply (this is the most important one)&lt;/li&gt;
  &lt;li&gt;People who declined your offer&lt;/li&gt;
  &lt;li&gt;People who applied to be interns years ago (and are now experienced)&lt;/li&gt;
  &lt;li&gt;People from the internet who are amazing, but don't yet know enough about you or who suspect their online application will go into a black whole (as it is with most online applications)&lt;/li&gt;
  &lt;li&gt;People you rejected years ago&lt;/li&gt;
  &lt;li&gt;People from the internet who may or may not be good enough to pass your interviews (yet!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea behind this section is give you some tools to help you start talking to them. We want them to think of you and apply, or educate themselves to the point that they'd pass your interviews.&lt;/p&gt;

&lt;p&gt;You can make them feel special and remember you with very little effort by giving all your open prospects access to your CTO…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Email them engineering articles written by your team.&lt;/li&gt;
  &lt;li&gt;Email them open positions; newly opened positions; and future positions along with your salary ranges. Why include salary for open positions? &lt;a href="https://dtrejo.com/why-share-salary.html"&gt;Because it is valuable to the reader to help them understand their market value&lt;/a&gt;. There are many more underpaid but good engineers than you imagine.&lt;/li&gt;
  &lt;li&gt;Send from your CTO's email&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You'll also find this email list useful because right now, each of your referral candidates gets vastly different amounts of information about your company, depending on how much your engineer talks to them. By putting everyone interested in you on this list, you get every candidate to a base level of understanding (and interest) in your company. You'll also get a better feel for your top of funnel.&lt;/p&gt;

&lt;h3 id="tools-to-nurture-open-prospects"&gt;Tools to Nurture Open Prospects&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;80% good enough option: &lt;a href="http://tinyletter.com/"&gt;Tinyletter.com&lt;/a&gt; (free). Since it doesn't do drip emails, you can include links to relevant engineering articles in the confirmation email.&lt;/li&gt;
  &lt;li&gt;Pro option: &lt;a href="https://www.drip.co/"&gt;drip.co&lt;/a&gt;. Free for under 100 subscribers. Like Tinyletter, requires permission (a good thing).&lt;/li&gt;
  &lt;li&gt;Pro option: &lt;a href="https://www.lever.co/nurture"&gt;Lever Nurture&lt;/a&gt;. Leans towards outreach, but also does nurturing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="coffee-and-scheduling-hell"&gt;Coffee and Scheduling Hell&lt;/h2&gt;
&lt;p&gt;Every engineer on your team probably gets coffee, lunch, or drinks with people who're interested in working for you. Everyone on your team should have a &lt;a href="https://calendly.com/"&gt;Calendly.com&lt;/a&gt; link (free). Scheduling manually is worse for both your team and your candidate. From a candidate's perspective, scheduling is one of the most low value, time-consuming and annoying parts of the interview process.&lt;/p&gt;

&lt;h2 id="stop-dropping-people"&gt;Stop Dropping People&lt;/h2&gt;
&lt;p&gt;Everyone on your team should use a tool that returns emails to their inbox if they don't get a reply. You probably already use an applicant tracking system, but I suspect you still drop candidates.&lt;/p&gt;

&lt;p&gt;An email reminder tool will help you avoid the following situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Candidate expresses interest, but gets dropped by recruiting&lt;/li&gt;
  &lt;li&gt;Engineer refers someone, but they get dropped&lt;/li&gt;
  &lt;li&gt;Referral gets rejected, but engineer never gets told how their referral did (and engineer stops referring people–bad!)&lt;/li&gt;
  &lt;li&gt;Recruiting forgets to reject a candidate, resulting in a bad experience for the candidate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As engineers we tend to be very sensitive about overloading other people's inboxes. This is not the time to be timid about cc'ing the referring engineer on every email. You &lt;strong&gt;want&lt;/strong&gt; to pay the candidate six figures, and you &lt;strong&gt;want&lt;/strong&gt; to pay the referrer their bonus. Archiving an email takes seconds. What's more important?&lt;/p&gt;

&lt;h2 id="tools-to-avoid-dropping-candidates"&gt;Tools to Avoid Dropping Candidates&lt;/h2&gt;
&lt;p&gt;I use &lt;a href="http://www.boomeranggmail.com/"&gt;Boomerang&lt;/a&gt; ($49/year). You may also like &lt;a href="https://mixmax.com/"&gt;Mixmax&lt;/a&gt; ($108/year, it does more). On my wish list is a "return &lt;strong&gt;every&lt;/strong&gt; 2 days if no reply" feature. Boomerang has this for more expensive plans. I don't believe Mixmax has this feature (hi Jen &amp;amp; Olof!). If you're too small to use a paid ATS, &lt;a href="https://www.streak.com/"&gt;Streak.com&lt;/a&gt; can be a good free option.&lt;/p&gt;

&lt;p&gt;You have an SLA for your product, why not for your hiring process?&lt;/p&gt;

&lt;h2 id="offer-letters"&gt;Offer Letters&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href="https://www.remarq.io/"&gt;Remarq.io&lt;/a&gt; ($19-$59/mo). Sending an offer shouldn't mean an exec needs to open Word. Remarq limits the number of unique documents (offers) you can send per month, which might be a problem for you.&lt;/p&gt;

&lt;p&gt;Alternatively, Google docs is a good option, as you can insert charts from Google Sheets into into your Google doc. Charts are useful to show growth trajectories and what they mean for the value of the candidate's equity.&lt;/p&gt;

&lt;h2 id="engineering-referrals"&gt;Engineering Referrals&lt;/h2&gt;
&lt;p&gt;Consider &lt;a href="http://teamable.com/"&gt;Teamable&lt;/a&gt;. Teamable prioritizes diverse referrals and helps companies reach 40%+ referral hires. I couldn't find public pricing. If you want a free option, email me and maybe I'll tell you my secrets :)&lt;/p&gt;

&lt;p&gt;What tools do you and your engineering team use to make hiring easier? Send me an email :)&lt;/p&gt;

&lt;p&gt;Yours,&lt;br /&gt;
David&lt;br /&gt;
david ått dtrejo.com&lt;/p&gt;

&lt;p&gt;PS I've just finished reading Moneyball, which is about how the Oakland A's baseball team bought great players even with very little money. I'll be sending out a book review of it in the next couple days, along with a section on how it applies to engineering hiring (so you can hire better engineers for less).&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>How to Reliably Get Your Team to Write Articles for Your Engineering Blog</title>
    <link rel="alternate" href="https://dtrejo.com/how-to-reliably-get-your-team-to-write-articles-for-your-engineering-blog.html"/>
    <id>https://dtrejo.com//how-to-reliably-get-your-team-to-write-articles-for-your-engineering-blog.html</id>
    <published>2017-04-23T21:54:00Z</published>
    <updated>2017-04-23T21:54:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;You probably already know why it's so helpful to have your team write
engineering articles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They're massively useful for recruiting, even if only a few people read them&lt;/li&gt;
  &lt;li&gt;If many people read your articles, you'll get tons more applicants&lt;/li&gt;
  &lt;li&gt;If you sell to developers, your articles create trust and lead to more
  sales, on top of the above&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="how-do-you-get-an-engineer-to-write-an-article"&gt;How do you get an engineer to write an article?&lt;/h2&gt;

&lt;p&gt;You don't. Instead you ask them over email:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"How does X work?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tip is from &lt;a href="https://twitter.com/melindakjacobs"&gt;Melinda Jacobs&lt;/a&gt;, CEO of
&lt;a href="https://www.lucentsky.com/"&gt;Lucent Sky&lt;/a&gt;. Her company automatically finds
vulnerabilities in your code and fixes many of them (which is
great for banks who have so many vulnerabilities that their security teams can't
possibly fix them all manually &lt;code&gt;:)&lt;/code&gt;. Thanks Melinda!&lt;/p&gt;

&lt;p&gt;Now, ask an engineer on your team and you'll get a detailed explanation of how some
part of your product works.  If you &lt;strong&gt;&lt;em&gt;know&lt;/em&gt;&lt;/strong&gt; they left out something impressive, ask
again after their initial answer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"I was really impressed with your work on Y, can you explain how that works too?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then you take their answers, &lt;a href="https://dtrejo.com/how-to-write-consistently-painlessly-and-without-writers-block.html#when-youre-ready-to-start-editing-these-writing-tools-will-come-in-handy"&gt;edit them with these tips&lt;/a&gt;,
run it by them to see if they have any suggestions, and publish. If
you're an engineer like me, I'd recommend you don't let them make the edits
themselves–they may get hung up on them. Instead ask them for feedback over email
or in a quick read-through and make the changes for them.&lt;/p&gt;

&lt;p&gt;It's up to you to make remember to ask your team to write articles after they
finish interesting projects. Remember, to an outsider, boring projects can be
just as interesting because they demonstrate mature, boring
technology&lt;sup&gt;†&lt;/sup&gt;. Projects with large business impact are also very
interesting, especially to engineers who care about business results.&lt;/p&gt;

&lt;p&gt;Take a minute right now to add a link to this article in your sprint
retrospectives (or planning cycle retrospectives). Otherwise you may forget to
put this advice into practice.&lt;/p&gt;

&lt;h2 id="a-published-article-is-worth-more-than-1000-unpublished-articles"&gt;A published article is worth more than 1,000 unpublished articles&lt;/h2&gt;

&lt;p&gt;Work on the article until you're 80% happy with it, then publish it. If you're
being ruthless with yourself, one hour total invested in the article is a
reasonable timeline. If you have extreme difficulty with a particular sentence,
the easiest way to fix it is to delete it &lt;code&gt;:)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="why-does-melindas-method-work-well"&gt;Why does Melinda's method work well?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;People write emails in complete sentences&lt;/li&gt;
  &lt;li&gt;People write like they speak, meaning it reads more naturally&lt;/li&gt;
  &lt;li&gt;People rarely have writer's block when it comes to explaining things to coworkers&lt;/li&gt;
  &lt;li&gt;People love to be recognized for their work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it, good luck!&lt;br /&gt;
David&lt;/p&gt;

&lt;p&gt;PS Do you have an engineering hiring tip you'd like me write up? Email me: david att dtrejo dot com.&lt;/p&gt;

&lt;p&gt;† Boring Technology, for example &lt;a href="http://mcfunley.com/choose-boring-technology"&gt;Choose Boring Technology&lt;/a&gt; &lt;a href="http://mcfunley.com/choose-boring-technology-slides"&gt;(slides)&lt;/a&gt; by Dan McKinley, Founder at Skyliner;
&lt;a href="https://www.slideshare.net/dianachow/marty-weiner-reddit-cto-sxswi-2016-everythings-harder-at-scale/1"&gt;"The boring tech revolution is here"&lt;/a&gt; by Reddit CTO Marty Weiner;
&lt;a href="https://github.com/yoshuawuyts/tiny-guide-to-non-fancy-node"&gt;Non-fancy Node&lt;/a&gt; by Yoshua Wuyts, author of 372 node modules.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why share salary?</title>
    <link rel="alternate" href="https://dtrejo.com/why-share-salary.html"/>
    <id>https://dtrejo.com//why-share-salary.html</id>
    <published>2017-04-12T18:53:00Z</published>
    <updated>2017-04-12T18:53:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;p&gt;Sharing salary ranges for engineering positions is delicate. You don't want
candidates to see the top end of the range and think that they left money on the
table. This creates awkwardness and unmet expectations. You also don't want
current engineers to feel they are being underpaid, making them ask for a raise.&lt;/p&gt;

&lt;h2 id="sharing-salary-ranges-is-beneficial-because"&gt;Sharing salary ranges is beneficial because…&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Job posts with salary get 75% more clicks than those that don't.&lt;sup&gt;†&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Engineers will love you for it, which means way more applicants.&lt;/li&gt;
  &lt;li&gt;You won't waste thousands of dollars on interviews with candidates who you can't afford.&lt;/li&gt;
  &lt;li&gt;You differentiate yourself from underpaying employers and the legion of shitty startups (there's way more of these than you realize). You might think that in today's climate, no respectable startup would lowball solid candidates. Your candidates have no idea whether you're respectable. The burden is on you to demonstrate respectability.&lt;/li&gt;
  &lt;li&gt;Sharing salary is "you-focused." If you appear selfish and only talk about what your company needs, everyone will tune out. Readers only care about themselves.&lt;/li&gt;
  &lt;li&gt;You won't melt into the sea of recruiter emails which almost never have salary information.&lt;/li&gt;
  &lt;li&gt;You catch the attention of undervalued engineers who are great at what they do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may already be publishing salary ranges to some job sites, so you might as
well share the range on your site as well.&lt;/p&gt;

&lt;h2 id="youre-still-hesitant-about-sharing-salary-bands"&gt;You're still hesitant about sharing salary bands…&lt;/h2&gt;
&lt;p&gt;Here are some options to reduce risk.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List a few salary ranges so it's clear you're hiring junior/mid/senior people. This way, the junior person won't expect to earn at the top end of the range.&lt;/li&gt;
  &lt;li&gt;Test it: run two identical job descriptions, one with a salary range and one without. See which gets more applicants and interest.&lt;/li&gt;
  &lt;li&gt;List only the bottom end of the range. Listing only the minimum could backfire because people may expect you to pay only +$20,000.00 USD above the minimum.&lt;/li&gt;
  &lt;li&gt;Do compensation research to learn about what the market pays. Work the numbers backwards from how much revenue you want them to make you (for this, I made you &lt;a href="https://EngineerWorth.com"&gt;EngineerWorth.com&lt;/a&gt;). When you have a solid business case for the hire, you'll feel good about the range you end up sharing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What's stopping you from sharing salary ranges? Email me and tell me: david åt dtrejo dot com.&lt;/p&gt;

&lt;p&gt;Best,&lt;br /&gt;
David&lt;/p&gt;

&lt;p&gt;† &lt;a href="https://blog.stackoverflow.com/2016/07/salary-transparency/"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Massive List of Engineering Recruiting Channels</title>
    <link rel="alternate" href="https://dtrejo.com/massive-list-of-engineering-recruiting-channels.html"/>
    <id>https://dtrejo.com//massive-list-of-engineering-recruiting-channels.html</id>
    <published>2017-03-28T06:15:00Z</published>
    <updated>2017-03-28T06:15:00Z</updated>
    <author>
      <name>DTrejo</name>
    </author>
    <content type="html">&lt;h2 id="this-list-is-for-you-if"&gt;This list is for you if…&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;You don't have enough top-of-funnel engineering candidates&lt;/li&gt;
  &lt;li&gt;You want to pursue channels with higher quality candidates&lt;/li&gt;
  &lt;li&gt;You'd like channels where you can attract engineers rather than chasing them&lt;/li&gt;
  &lt;li&gt;You want to hire engineers from under-represented groups in technology&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I leave it to you to figure out how to source from each of these channels. I've
sorted to the top the channels for which I am comfortable sharing my conversion
rates with you.&lt;/p&gt;

&lt;h2 id="massive-list-of-all-hiring-channels"&gt;Massive list of all hiring channels&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cold emails to engineers (50% reply-rate and 17% interested in a call is achievable with a well-written email)&lt;/li&gt;
  &lt;li&gt;Email newsletters – for example js weekly, node weekly, ruby weekly, and so on for your whole stack (2% click through rate is achievable with a well-written ad)&lt;/li&gt;
  &lt;li&gt;HN who's hiring monthly (#5 post with 30 applicants/month is achievable with a well-written post)&lt;/li&gt;
  &lt;li&gt;Airbnb&lt;/li&gt;
  &lt;li&gt;Angellist – A-list&lt;/li&gt;
  &lt;li&gt;Bootcamp grads&lt;/li&gt;
  &lt;li&gt;California layoffs notifications&lt;/li&gt;
  &lt;li&gt;Conference tours (keynote or give a talk)&lt;/li&gt;
  &lt;li&gt;Conferences – lanyrd: speakers, attendees, sponsors can email attendees&lt;/li&gt;
  &lt;li&gt;Contest for e.g. 1 set of free conference tickets to Velocity for example (very expensive but cool!); and 1 set of free tickets for under-represented group in tech. Also worth including: housing, for example on a not creepy teammate's couch.&lt;/li&gt;
  &lt;li&gt;Couchsurfing&lt;/li&gt;
  &lt;li&gt;Coursera grads
    &lt;ul&gt;
      &lt;li&gt;e.g. with certs from…&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.coursera.org/specializations/algorithms"&gt;Algorithms Specialization&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.coursera.org/learn/progfun1"&gt;Functional Programming Principles in Scala&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.coursera.org/learn/machine-learning"&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.coursera.org/learn/algorithms-on-graphs"&gt;Algorithms on Graphs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Craigslist&lt;/li&gt;
  &lt;li&gt;Events: print index cards with the short blurb of your open positions and give them to your team to put up in the women's/gender-neutral/men's bathroom stalls and urinals. Give them tape.&lt;/li&gt;
  &lt;li&gt;Facebook graph search for CS grads who are friends of friends&lt;/li&gt;
  &lt;li&gt;Facebook groups for your area: hackathon groups, new to the bay area, new grad $gradyear, breaking into tech, job searching, technical interviews&lt;/li&gt;
  &lt;li&gt;For yourself and each teammate…
    &lt;ul&gt;
      &lt;li&gt;Facebook friends&lt;/li&gt;
      &lt;li&gt;Github/BitBucket: contributors to your OSS repos&lt;/li&gt;
      &lt;li&gt;Github/BitBucket: issue-openers on your OSS repos&lt;/li&gt;
      &lt;li&gt;Github/BitBucket: star-ers of your OSS repos&lt;/li&gt;
      &lt;li&gt;Google contacts&lt;/li&gt;
      &lt;li&gt;Twitter lead cards&lt;/li&gt;
      &lt;li&gt;Twitter: your followers; people you follow; people they follow; people who follow your competitors; people your competitors follow.&lt;/li&gt;
      &lt;li&gt;University alumni facebook groups; email lists; in-person events&lt;/li&gt;
      &lt;li&gt;University professors who recommend you their top students&lt;/li&gt;
      &lt;li&gt;University recruiting: resume reviews; give tech talks; give unofficial tech talks; visit unofficially&lt;/li&gt;
      &lt;li&gt;University student group email lists; official paid recruiting programs; facebook groups; etc&lt;/li&gt;
      &lt;li&gt;University hackathons&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Games: advertising inside of various games, ideally with &amp;gt;50% ratio of women via Willem Wijnans&lt;/li&gt;
  &lt;li&gt;Github/BitBucket: OSS contribs to OSS projects you admire&lt;/li&gt;
  &lt;li&gt;Github/BitBucket: people who open issues on OSS projects you admire&lt;/li&gt;
  &lt;li&gt;Github/BitBucket: people who star OSS projects you admire&lt;/li&gt;
  &lt;li&gt;Goodreads/Amazon: friends of people who've reviewed eng books&lt;/li&gt;
  &lt;li&gt;Goodreads/Amazon: people who've reviewed engineering books&lt;/li&gt;
  &lt;li&gt;Google Plus&lt;/li&gt;
  &lt;li&gt;Hackathons: attending them, contacting past winners&lt;/li&gt;
  &lt;li&gt;HackerRank.com, LeetCode.com, Interviewing.io, projecteuler.net&lt;/li&gt;
  &lt;li&gt;Hired&lt;/li&gt;
  &lt;li&gt;HN articles about your stack + interesting eng decisions - authors, commenters&lt;/li&gt;
  &lt;li&gt;HN who's searching for a job&lt;/li&gt;
  &lt;li&gt;Instagram: hashtags, geotags&lt;/li&gt;
  &lt;li&gt;IRC&lt;/li&gt;
  &lt;li&gt;Linkedin: traditional searches (ew); email your friends who you'd want to work with again; email friends who know many of your target type of engineer and ask for intros. I made a tool to help you do this, email me about it, I'll run it for you for free :) (david [åt] dtrejo dot com)&lt;/li&gt;
  &lt;li&gt;Livecoding on Twitch, liveedu.tv, YouTube,&lt;/li&gt;
  &lt;li&gt;Meetups:
    &lt;ul&gt;
      &lt;li&gt;meetup.com;&lt;/li&gt;
      &lt;li&gt;artisanal meetup websites&lt;/li&gt;
      &lt;li&gt;your own meetups (e.g. start organizing your city's offline first meetup)&lt;/li&gt;
      &lt;li&gt;arrive prepared: know roughly who you want to talk to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Medium articles about your technologies - authors, commenters&lt;/li&gt;
  &lt;li&gt;Medium articles exposing bad workplaces - authors, commenters&lt;/li&gt;
  &lt;li&gt;Product Hunt – product creators who don't seem to have solid business models&lt;/li&gt;
  &lt;li&gt;Quora answerers for technologies in your stack&lt;/li&gt;
  &lt;li&gt;Reddit – people who share their absurdly low salary and impressive achievements&lt;/li&gt;
  &lt;li&gt;Reddit r/programming and every other relevant r/ -&amp;gt; Post engineering articles with CTA (call to action).&lt;/li&gt;
  &lt;li&gt;Reddit, monthly who's hiring for each language you use (e.g. &lt;a href="https://www.reddit.com/r/C_Programming/comments/5w9z8i/whos_hiring_c_programmers_q1_2017/df41v4h/"&gt;r/C_Programming&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Referrals: Searchlight meetings aka sourcing sessions (used at Stripe, Dropbox, and more. via Ivan Kirigin list ways to get them, link to searchlight instructions&lt;/li&gt;
  &lt;li&gt;Retargeted ads using emails you've found elsewhere (discount by # of people who run ad-blockers)&lt;/li&gt;
  &lt;li&gt;Skype search&lt;/li&gt;
  &lt;li&gt;Skype search (via Atallah)&lt;/li&gt;
  &lt;li&gt;Slack groups that are public: hamsterpad, slacklist, chitchats&lt;/li&gt;
  &lt;li&gt;Snapchat&lt;/li&gt;
  &lt;li&gt;Spotify: spell your message with songs via Willem Wijnans&lt;/li&gt;
  &lt;li&gt;StackExchange Data Explorer via Willem Wijnans&lt;/li&gt;
  &lt;li&gt;Stackoverflow answerers for technologies in your stack&lt;/li&gt;
  &lt;li&gt;Startups in general because they underpay their engineers and give out equity that is more illiquid than typical&lt;/li&gt;
  &lt;li&gt;Startups who haven't publicly raised in the last year&lt;/li&gt;
  &lt;li&gt;Strava&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://philipmorganconsulting.com/lead-generation-trust-velocity/"&gt;Trust Velocity via Philip Morgan&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Mainstream press&lt;/li&gt;
      &lt;li&gt;Media interview&lt;/li&gt;
      &lt;li&gt;Podcast guesting (combined with great CTA)&lt;/li&gt;
      &lt;li&gt;Single guest post on major publication&lt;/li&gt;
      &lt;li&gt;Lead magnet on trusted 3rd party website&lt;/li&gt;
      &lt;li&gt;Regularly showing up in prospect's email inbox with relevant content&lt;/li&gt;
      &lt;li&gt;"Lumpy Envelope" campaign (e.g. how Matasano gives books to candidates who aren't experienced enough yet)&lt;/li&gt;
      &lt;li&gt;Job aid, calculator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Udemy grads (https://www.udacity.com/hire-talent) - free to hire
    &lt;ul&gt;
      &lt;li&gt;e.g. with certs from…&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.udacity.com/course/design-of-computer-programs--cs212"&gt;Design of Computer Programs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.udacity.com/course/intro-to-algorithms--cs215"&gt;Intro to Algorithms&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://www.udacity.com/course/computability-complexity-algorithms--ud061"&gt;Computability, Complexity &amp;amp; Algorithms&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Vimeo – speakers, commenters&lt;/li&gt;
  &lt;li&gt;Volunteering events – e.g. teaching kids to code&lt;/li&gt;
  &lt;li&gt;WiFi SSID via Willem Wijnans&lt;/li&gt;
  &lt;li&gt;Write a book for engineers (personal experience: works great)&lt;/li&gt;
  &lt;li&gt;Youtube – speakers, maybe commenters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What would make this list more useful for you? Email me: david [åt] dtrejo dot com.&lt;/p&gt;

&lt;p&gt;May engineers be with you,&lt;br /&gt;
David&lt;/p&gt;

&lt;!-- PS Learn exactly how I hire: enter your email below. --&gt;
</content>
  </entry>
</feed>
